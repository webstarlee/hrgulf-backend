{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/app.js","webpack:///./src/bin/start-webapp.js","webpack:///./src/core/config.js","webpack:///./src/core/consts.js","webpack:///./src/core/db.js","webpack:///./src/core/dbConn.js","webpack:///./src/core/fetch.js","webpack:///./src/core/helpers.js","webpack:///./src/core/i18n/ar.js","webpack:///./src/core/i18n/en.js","webpack:///./src/core/mailer.js","webpack:///./src/core/myCrypto.js","webpack:///./src/core/strings.js","webpack:///./src/core/tracer.js","webpack:///./src/routes/admin-api.js","webpack:///./src/routes/admin-api/about.js","webpack:///./src/routes/admin-api/auth.js","webpack:///./src/routes/admin-api/mass-email.js","webpack:///./src/routes/admin-api/profile.js","webpack:///./src/routes/admin-api/users.js","webpack:///./src/routes/api.js","webpack:///./src/routes/api/about.js","webpack:///./src/routes/api/account.js","webpack:///./src/routes/api/auth.js","webpack:///./src/routes/api/core.js","webpack:///./src/routes/api/hire.js","webpack:///./src/routes/api/hire/account.js","webpack:///./src/routes/api/hire/auth.js","webpack:///./src/routes/api/hire/my-jobs.js","webpack:///./src/routes/api/hire/my-jobs/my-jobs.js","webpack:///./src/routes/api/hire/my-jobs/post-a-job.js","webpack:///./src/routes/api/hire/workplace.js","webpack:///./src/routes/api/hire/workplace/employer-test.js","webpack:///./src/routes/api/hire/workplace/letters.js","webpack:///./src/routes/api/hire/workplace/my-company-profiles.js","webpack:///./src/routes/api/hire/workplace/questionnaire.js","webpack:///./src/routes/api/profile.js","webpack:///./src/routes/api/work.js","webpack:///./src/routes/api/work/account.js","webpack:///./src/routes/api/work/auth.js","webpack:///./src/routes/api/work/find-jobs.js","webpack:///./src/routes/api/work/find-jobs/find-jobs.js","webpack:///./src/routes/api/work/find-jobs/jobs-by-companies.js","webpack:///./src/routes/api/work/find-jobs/jobs-by-location.js","webpack:///./src/routes/api/work/find-jobs/jobs-by-role.js","webpack:///./src/routes/api/work/find-jobs/jobs-by-sector.js","webpack:///external \"axios\"","webpack:///external \"cluster\"","webpack:///external \"cookie-parser\"","webpack:///external \"cors\"","webpack:///external \"crypto\"","webpack:///external \"dateformat\"","webpack:///external \"ddos\"","webpack:///external \"debug\"","webpack:///external \"dotenv\"","webpack:///external \"email-templates\"","webpack:///external \"express\"","webpack:///external \"express-form-data\"","webpack:///external \"express-jwt\"","webpack:///external \"fs\"","webpack:///external \"helmet\"","webpack:///external \"http\"","webpack:///external \"https\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"mkdirp\"","webpack:///external \"moment\"","webpack:///external \"morgan\"","webpack:///external \"mysql2\"","webpack:///external \"nodemailer\"","webpack:///external \"os\"","webpack:///external \"path\"","webpack:///external \"sprintf-js\"","webpack:///external \"tracer\"","webpack:///external \"uuid\""],"names":["ddos","Ddos","maxcount","process","env","DDOS_MAXCOUNT","burst","DDOS_BURST","limit","DDOS_LIMIT","trustProxy","DDOS_TRUST_PROXY","app","express","cwd","options","uploadDir","os","tmpdir","autoClean","set","path","join","use","logger","json","urlencoded","extended","cookieParser","formData","parse","format","stream","union","cors","helmet","static","adminApiRouter","apiRouter","get","req","res","sendFile","err","next","locals","message","error","status","render","debug","port","sslPort","httpServer","httpsServer","cluster","isMaster","numCPUs","server","isDev","cpus","length","i","fork","on","worker","code","signal","console","log","pid","isWorker","debugLib","normalizePort","http","createServer","listen","onError","e","onListening","credentials","key","fs","readFileSync","sslKey","cert","sslCert","ca","sslCA","passphrase","https","val","parseInt","isNaN","syscall","bind","exit","addr","address","require","config","HTTP_PORT","HTTPS_PORT","baseUrl","BASE_URL","name","description","author","secret","environment","NODE_ENV","mysql","connectionLimit","host","MYSQL_HOST","MYSQL_PORT","user","MYSQL_USER","password","MYSQL_PASSWORD","database","MYSQL_DATABASE","session","secretAdmin","dbTblName","core","users","avatars","signInHistory","jobRoles","jobSubroles","sectors","industries","countries","cities","employmentTypes","salaryRanges","careerLevels","majors","degrees","grades","visaStatuses","specialties","hire","accounts","questionnaire","main","questions","answers","letters","jobs","candidateRequirements","my_company_profiles","work","candidates","resetPasswordTokens","smtp","secureConnection","pass","receipt","uploadPath","workplace","myCompanyProfiles","cvs","aboutUs","success","lang","defaultPageSize","defaultPageSize2","defaultLanguage","current","male","female","questionTypes","C","I","R","prefixCheckbox","prefixInput","prefixRadio","tokenLifetime","tokenStatus","VALID","EXPIRED","NOT_FOUND","ALREADY_USED","EMAIL_NOT_FOUND","auth","SOCIAL_SIGN_UP_PASSWORD","social","GOOGLE","FACEBOOK","accountTypes","HIRE","WORK","avatar","DEFAULT_AVATAR","resetPasswordUri","eliteResourcesUrl","db","query","q","data","Promise","resolve","reject","dbConn","createPool","GET","POST","PUT","PATCH","DELETE","CancelToken","axios","cancel","cancelRequest","getQueryString","params","esc","encodeURIComponent","Object","keys","map","k","getJsonBody","setHeader","entries","forEach","value","defaults","headers","common","requestType","resourceURL","parameters","queryString","cancelToken","c","then","response","catch","jsonBody","post","put","patch","delete","_calculateStartPosition","page","pageSize","consts","start","_makeLimitClause","sprintf","_makeWhereClause","conditions","conditionArr","values","push","clause","_makeUpdateClause","updates","_makeOnDuplicateUpdateClause","_makeOrderClause","orders","orderArr","orderClause","sleep","ms","handle","setTimeout","clearTimeout","uploadFile","file","fileDir","fileName","uuid","extname","filePath","writable","createWriteStream","mkdirp","sync","pipe","uploadBase64Image","base64","base64Data","replace","writeFile","listQuery","table","whereClause","limitClause","sql","rows","count","pageCount","Math","ceil","getQuery","updateQuery","updateClause","values1","values2","deleteQuery","now","Date","today","dateformat","handleErr","langs","tracer","__filename","send","result","unknownServerError","emailAlreadyRegistered","usernameAlreadyRegistered","successfullyRegistered","emailIsIncorrect","emailIsNotRegistered","usernameIsIncorrect","passwordIsIncorrect","yourAccountIsNotAllowed","yourAccountIsClosed","successfullySignedIn","successfullySignedOut","error404","error500","successfullySaved","successfullyAdded","successfullyEdited","successfullyChanged","successfullyDeleted","successfullyReset","currentPasswordIncorrect","failedDueToUnknownServerError","invalidParameters","notUploaded","notFound","noData","successfullyUploaded","successfullyPosted","successfullyJoined","youHaveAlreadyJoined","successfullySent","invalidHash","invalidUser","notRegistered","passwordIsSuccessfullyChanged","forgotPassword","resetEmailIsSent","tokenIsValid","tokenIsExpired","tokenIsNotFound","tokenIsAlreadyUsed","accountIsInvalid","accountIsNotRegistered","accountIsAlreadyRegistered","yourAccountDoesNotSupportGoogleAuth","yourAccountDoesNotSupportFacebookAuth","successfullyActivated","successfullyDeactivated","email","emailTemplates","from","transport","jsonTransport","sendForgotPasswordMail","html","transporter","nodemailer","createTransport","secure","tls","rejectUnauthorized","mailOptions","to","subject","sendMail","info","sendContactUsMail","sendCourseJoinMail","sendMassMail","text","hmacHex","plain","cipher","crypto","createHmac","update","digest","en","ar","tracerLib","colorConsole","preprocess","title","toUpperCase","router","Router","loadAboutUs","strings","brochure","video","helpers","saveAboutUs","scope","body","date","time","timestamp","getTime","appDir","brochureName","brochurePath","brochureWritable","brochureMedia","videoName","videoPath","videoWritable","videoMedia","oldFilename","basename","unlink","newRows","saveAboutUsBrochure","originBrochure","saveAboutUsVideo","originVideo","signInProc","admins","hash","myCrypto","token","jwt","sign","id","username","signUpProc","role","sendProc","row","mailer","saveProc","changePasswordProc","password0","hash0","_loadData","userId","search","allowedWhere","number","listProc","allowProc","allow","deleteProc","firstName","fatherName","lastName","gender","birthday","jobTitle","sector","company","city","phone","getProc","countProc","countAwaiting","signInHistoryProc","days","before","startDate","endDate","usersSigninHistory","countPerGenderProc","expressJwt","unless","authRouter","coreRouter","accountRouter","hireRouter","workRouter","aboutRouter","avatarProc","url","originUrl","scale","borderRadius","position","x","xPosition","y","yPosition","rotate","saveAvatarProc","fileName2","savePersonalInfoProc","nationalityId","countryId","cityId","website","countryCode","newRow","_validateToken","expire","used","_validateGoogleAccount","googleId","id_token","fetch","accountSettings","sub","registered","invalidToken","assign","accountType","emailRegistered","_validateFacebookAccount","socialId","accessToken","access_token","deletedDate","allowedDate","hireId","workId","remoteAddress","header","connection","sendForgotPasswordMailProc","validateTokenProc","resetPasswordProc","getJobRolesProc","type","getJobSubrolesProc","jobRoleId","getSectorsProc","getIndustriesProc","sectorId","getCountriesProc","getCitiesProc","getEmploymentTypesProc","getSalaryRangesProc","minSalary","getCareerLevelsProc","level","getMajorsProc","min","getDegreesProc","getVisaStatusesProc","getGradesProc","workplaceRouter","myJobsRouter","size","industryId","hideLocation","taxRegNumber","location","toISOString","insertId","postAJobRouter","_listItems","keyword","_listItemsProc","jobInformation","activateProc","isActive","postJobProc","candidateType","jobSubroleId","employmentTypeId","salaryRangeId","vacanciesCount","skills","questionnaireId","careerLevel","xpYear1","xpYear2","majorId","degree","age1","age2","questionnaireRouter","lettersRouter","myCompanyProfilesRouter","employerTestRouter","_loadDepartments","hireEmployerTestDepartments","_loadCategories","departmentId","hireEmployerTestCategories","departmentsProc","categoriesProc","attachment","attached","uploadAttachmentProc","loadSalaryProc","unit","salaryUnit","salaryMin","max","salaryMax","saveSalaryProc","loadAboutProc","about","saveAboutProc","loadVisionProc","vision","saveVisionProc","loadMissionProc","mission","saveMissionProc","loadCoverPhotoProc","saveCoverPhotoProc","coverPhoto","_listQuestionnaires","_listQuestions","index","filterByScore","minScore","question","required","hasCorrectAnswer","correctAnswer","listQuestionsProc","saveQuestionProc","getQuestionProc","deleteQuestionProc","user_avatar","media","findJobsRouter","_save","companyName","isPresent","jobLocationId","companySectorId","companyIndustryId","jobVisaStatusId","university","graduatedDate","gradeId","isVisited","saveMinifiedProfile","cvPath","jobsByRoleRouter","jobsByLocationRouter","jobsBySectorRouter","jobsByCompaniesRouter","genders","companyTypes","companyNames","dateModified","whereArr","specialtyArr","split","subWhereArr","item","diff","nowEn","nowAr","moment","locale","fromNow","_listCountries","_listCities","_listJobRoles","_listSpecialties","_listIndustries","_listCareerLevels","_listEmploymentTypes","_listGenders","_listCompanyTypes","_listCompanyNames","listCountriesProc","listCitiesProc","listJobRolesProc","listSpecialtiesProc","listIndustriesProc","listCareerLevelsProc","listEmploymentTypesProc","listGendersProc","listCompanyTypesProc","listCompanyNamesProc","applyProc","jobId","_listCompanies","listCompaniesProc","_listLocations","listLocationsProc","_listRoles","locationWhereArr","locationValueArr","locationWhere","listRolesProc","_listSectors","listSectorsProc"],"mappings":"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","file":"server.development.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/bin/start-webapp.js\");\n","import express from \"express\";\r\nimport path from \"path\";\r\nimport cookieParser from \"cookie-parser\";\r\nimport formData from \"express-form-data\";\r\nimport os from \"os\";\r\nimport logger from \"morgan\";\r\nimport cors from \"cors\";\r\nimport helmet from \"helmet\";\r\nimport Ddos from \"ddos\";\r\nconst ddos = new Ddos({\r\n  maxcount: process.env.DDOS_MAXCOUNT,\r\n  burst: process.env.DDOS_BURST,\r\n  limit: process.env.DDOS_LIMIT,\r\n  trustProxy: !process.env.DDOS_TRUST_PROXY || process.env.DDOS_TRUST_PROXY === \"true\",\r\n});\r\n\r\nimport apiRouter from \"./routes/api\";\r\nimport adminApiRouter from \"./routes/admin-api\";\r\n\r\nconst app = express();\r\nconst cwd = process.cwd();\r\nconst options = {\r\n  uploadDir: os.tmpdir(),\r\n  autoClean: true\r\n};\r\n\r\n// view engine setup\r\napp.set(\"views\", path.join(cwd, \"views\"));\r\napp.set(\"view engine\", \"pug\");\r\n\r\napp.use(logger(\"dev\"));\r\napp.use(express.json());\r\napp.use(express.urlencoded({ extended: false }));\r\napp.use(cookieParser());\r\n\r\napp.use(formData.parse(options));\r\napp.use(formData.format());\r\napp.use(formData.stream());\r\napp.use(formData.union());\r\n\r\nprocess.env.NODE_ENV !== \"production\" && app.use(cors());\r\napp.use(helmet());\r\n\r\napp.use(\"/admin/assets\", express.static(path.join(cwd, \"public\")));\r\napp.use(\"/assets\", express.static(path.join(cwd, \"public\")));\r\n\r\napp.use(\"/admin/api\", adminApiRouter);\r\napp.use(\"/api\", ddos.express, apiRouter);\r\n\r\napp.use(\"/admin\", express.static(path.join(cwd, \"admin-frontend\")));\r\napp.get(\"/admin/*\", function (req, res) {\r\n  res.sendFile(path.join(cwd, \"admin-frontend/index.html\"));\r\n});\r\n\r\napp.use(express.static(path.join(cwd, \"frontend\")));\r\napp.get(\"*\", (req, res) => {\r\n  res.sendFile(path.join(cwd, \"frontend/index.html\"));\r\n});\r\n\r\n\r\n// error handler\r\napp.use(function(err, req, res, next) {\r\n  // set locals, only providing error in development\r\n  res.locals.message = err.message;\r\n  res.locals.error = req.app.get(\"env\") === \"development\" ? err : {};\r\n\r\n  // render the error page\r\n  res.status(err.status || 500);\r\n  res.render(\"error\");\r\n});\r\n\r\nexport default app;\r\n","import app from \"app\";\r\nimport debugLib from \"debug\";\r\nimport http from \"http\";\r\nimport https from \"https\";\r\nimport cluster from \"cluster\";\r\nimport fs from \"fs\";\r\nimport os from \"os\";\r\nimport {server} from \"core/config\";\r\n\r\nlet debug;\r\nlet port;\r\nlet sslPort;\r\nlet httpServer;\r\nlet httpsServer;\r\n\r\nif (cluster.isMaster) {\r\n  const numCPUs = server.isDev ? 1 : os.cpus().length;\r\n  for (let i = 0; i < numCPUs; i++) {\r\n    cluster.fork();\r\n  }\r\n\r\n  cluster.on(\"exit\", (worker, code, signal) => {\r\n    console.log(`Worker ${worker.process.pid} died`);\r\n  });\r\n  // cluster.fork();\r\n  // cluster.on(\"exit\", function (worker, code, signal) {\r\n  //   cluster.fork();\r\n  // });\r\n}\r\n\r\nif (cluster.isWorker) {\r\n  debug = new debugLib(\"express:server\");\r\n  port = normalizePort(server.port);\r\n  sslPort = normalizePort(server.sslPort);\r\n\r\n  app.set(\"port\", port);\r\n  httpServer = http.createServer(app);\r\n\r\n  httpServer.listen(port);\r\n  httpServer.on(\"error\", onError);\r\n  httpServer.on(\"listening\", e => onListening(httpServer));\r\n\r\n  const credentials = {\r\n    key: fs.readFileSync(server.sslKey),\r\n    cert: fs.readFileSync(server.sslCert),\r\n    ca: [\r\n      fs.readFileSync(server.sslCA),\r\n    ],\r\n    passphrase: \"abc123\",\r\n  };\r\n  httpsServer = https.createServer(credentials, app);\r\n\r\n  httpsServer.listen(sslPort);\r\n  httpsServer.on(\"error\", onError);\r\n  httpsServer.on(\"listening\", e => onListening(httpsServer));\r\n}\r\n\r\nfunction normalizePort(val) {\r\n  const port = parseInt(val, 10);\r\n\r\n  if (isNaN(port)) {\r\n    // named pipe\r\n    return val;\r\n  }\r\n\r\n  if (port >= 0) {\r\n    // port number\r\n    return port;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction onError(error) {\r\n  if (error.syscall !== \"listen\") {\r\n    throw error;\r\n  }\r\n\r\n  const bind = typeof port === \"string\"\r\n    ? \"Pipe \" + port\r\n    : \"Port \" + port;\r\n\r\n  // handle specific listen errors with friendly messages\r\n  switch (error.code) {\r\n    case \"EACCES\":\r\n      console.error(bind + \" requires elevated privileges\");\r\n      process.exit(1);\r\n      break;\r\n    case \"EADDRINUSE\":\r\n      console.error(bind + \" is already in use\");\r\n      process.exit(1);\r\n      break;\r\n    default:\r\n      throw error;\r\n  }\r\n}\r\n\r\nfunction onListening(server) {\r\n  const addr = server.address();\r\n  const bind = typeof addr === \"string\"\r\n    ? \"pipe \" + addr\r\n    : \"port \" + addr.port;\r\n  debug(`Listening on ${bind} pid: ${process.pid}`);\r\n  console.log(`Listening on ${bind} pid: ${process.pid}`);\r\n}\r\n","require(\"dotenv\").config();\r\n\r\nconst server = {\r\n  isDev: process.env.NODE_ENV !== \"production\",\r\n  port: process.env.HTTP_PORT,\r\n  sslPort: process.env.HTTPS_PORT,\r\n  baseUrl: process.env.BASE_URL,\r\n  name: \"hrgulf.org\",\r\n  description: \"Portal in hrgulf.org\",\r\n  author: \"Zhenlong J.\",\r\n  secret: \"hrgulf@@\",\r\n  sslKey: \"./sslcert/server.key\",\r\n  sslCert: \"./sslcert/1e720c418ffe9875.crt\",\r\n  sslCA: \"./sslcert/gd_bundle-g2-g1.crt\",\r\n  environment: process.env.NODE_ENV,\r\n};\r\nconst mysql = {\r\n  connectionLimit: 10,\r\n  host: process.env.MYSQL_HOST,\r\n  port: process.env.MYSQL_PORT,\r\n  user: process.env.MYSQL_USER,\r\n  password: process.env.MYSQL_PASSWORD,\r\n  database: process.env.MYSQL_DATABASE,\r\n};\r\nconst session = {\r\n  name: \"knowledge.hrgulf.org\",\r\n  key: \"knowledge.hrgulf.org\",\r\n  secret: \"knowledge.hrgulf.org@@\",\r\n  secretAdmin: \"knowledge.hrgulf.org_admin@@\",\r\n};\r\nconst dbTblName = {\r\n  core: {\r\n    users: \"core_users\",\r\n    avatars: \"core_avatars\",\r\n    signInHistory: \"core_sign_in_history\",\r\n    jobRoles: \"core_job_roles\",\r\n    jobSubroles: \"core_job_subroles\",\r\n    sectors: \"core_sectors\",\r\n    industries: \"core_industries\",\r\n    countries: \"core_countries\",\r\n    cities: \"core_cities\",\r\n    employmentTypes: \"core_employment_types\",\r\n    salaryRanges: \"core_salary_ranges\",\r\n    careerLevels: \"core_career_levels\",\r\n    majors: \"core_majors\",\r\n    degrees: \"core_degrees\",\r\n    grades: \"core_grades\",\r\n    visaStatuses: \"core_visa_statuses\",\r\n    specialties: \"core_specialties\",\r\n  },\r\n  hire: {\r\n    accounts: \"hire_accounts\",\r\n    questionnaire: {\r\n      main: \"hire_questionnaire\",\r\n      questions: \"hire_questionnaire_questions\",\r\n      answers: \"answers\",\r\n    },\r\n    letters: \"hire_letters\",\r\n    jobs: {\r\n      main: \"hire_jobs\",\r\n      candidateRequirements: \"hire_job_candidate_requirements\"\r\n    },\r\n    my_company_profiles: \"hire_my_company_profiles\",\r\n  },\r\n  work: {\r\n    accounts: \"work_accounts\",\r\n    jobs: {\r\n      candidates: \"work_job_candidates\",\r\n    },\r\n  },\r\n\r\n  resetPasswordTokens: \"reset_password_tokens\",\r\n};\r\n\r\nconst smtp = {\r\n  // service: \"gmail\",\r\n  host: \"smtp.office365.com\",\r\n  secureConnection: true,\r\n  port: 587,\r\n  // secure: true,\r\n  user: \"pm@eliteresources.co\",\r\n  pass: \"Theelite6*\",\r\n  limit: {\r\n    receipt: 2999,\r\n    message: 19,\r\n  },\r\n};\r\n\r\nexport {\r\n  server,\r\n  mysql,\r\n  session,\r\n  dbTblName,\r\n  smtp,\r\n}\r\nexport default {\r\n  server,\r\n  mysql,\r\n  session,\r\n  dbTblName,\r\n  smtp,\r\n}\r\n","export const uploadPath = {\r\n  avatars: \"uploads/avatars\",\r\n  hire: {\r\n    workplace: {\r\n      letters: \"uploads/hire/workplace/letters\",\r\n      myCompanyProfiles: \"uploads/hire/workplace/my-company-profiles\",\r\n    },\r\n  },\r\n  work: {\r\n    cvs: \"uploads/work/cvs\",\r\n  },\r\n  aboutUs: \"uploads/about-us\",\r\n};\r\nexport const success = \"success\";\r\nexport const error = \"error\";\r\nexport const lang = \"lang\";\r\nexport const defaultPageSize = 10;\r\nexport const defaultPageSize2 = 12;\r\nexport const defaultLanguage = \"en\";\r\n\r\nexport const current = \"current\";\r\n\r\nexport const male = \"M\";\r\nexport const female = \"F\";\r\n\r\nexport const questionTypes = {\r\n  C: \"Checkbox\",\r\n  I: \"Input\",\r\n  R: \"Radio\",\r\n};\r\n\r\nexport const prefixCheckbox = \"C\";\r\nexport const prefixInput = \"I\";\r\nexport const prefixRadio = \"R\";\r\n\r\nexport const tokenLifetime = 24;\r\nexport const tokenStatus = {\r\n  VALID: 1,\r\n  EXPIRED: 2,\r\n  NOT_FOUND: 3,\r\n  ALREADY_USED: 4,\r\n  EMAIL_NOT_FOUND: 5,\r\n};\r\n\r\nexport const auth = {\r\n  SOCIAL_SIGN_UP_PASSWORD: \"\",\r\n};\r\n\r\nexport const social = {\r\n  name: {\r\n    GOOGLE: \"Google\",\r\n    FACEBOOK: \"Facebook\",\r\n  }\r\n};\r\n\r\nexport const accountTypes = {\r\n  HIRE: \"HIRE\",\r\n  WORK: \"WORK\",\r\n};\r\n\r\n\r\nexport const avatar = {\r\n  DEFAULT_AVATAR: \"images/default-avatar.png\",\r\n};\r\n\r\nexport const resetPasswordUri = \"auth/reset-password\";\r\n\r\nexport const eliteResourcesUrl = \"https://eliteresources.co\";\r\n\r\nexport default {\r\n  uploadPath,\r\n  success,\r\n  error,\r\n  lang,\r\n  defaultPageSize,\r\n  defaultPageSize2,\r\n  defaultLanguage,\r\n  current,\r\n  male,\r\n  female,\r\n  questionTypes,\r\n  prefixCheckbox,\r\n  prefixInput,\r\n  prefixRadio,\r\n  tokenLifetime,\r\n  tokenStatus,\r\n  auth,\r\n  social,\r\n  accountTypes,\r\n  resetPasswordUri,\r\n  eliteResourcesUrl,\r\n}\r\n","import dbConn from \"core/dbConn\";\r\n\r\nconst db = {};\r\n\r\ndb.query = (q, data) => {\r\n  return new Promise((resolve, reject) => {\r\n    dbConn.query(q, data, (err, res) => {\r\n      err ? reject(err) : resolve(res);\r\n    });\r\n  });\r\n};\r\n\r\nexport default db;\r\n","import mysql from \"mysql2\";\r\nimport config from \"core/config\";\r\n\r\nexport default mysql.createPool(config.mysql);\r\n","import axios from \"axios\";\r\n\r\nexport const GET = \"GET\";\r\nexport const POST = \"POST\";\r\nexport const PUT = \"PUT\";\r\nexport const PATCH = \"PATCH\";\r\nexport const DELETE = \"DELETE\";\r\n\r\n\r\nlet CancelToken = axios.CancelToken;\r\n\r\nlet cancel = () => {\r\n};\r\nexport const cancelRequest = () => {\r\n  return cancel;\r\n};\r\n\r\nconst getQueryString = (params) => {\r\n  if (!params)\r\n    return \"\";\r\n\r\n  let esc = encodeURIComponent;\r\n  return (\r\n    \"?\" +\r\n    Object.keys(params)\r\n      .map(k => esc(k) + \"=\" + esc(params[k]))\r\n      .join(\"&\")\r\n  );\r\n};\r\n\r\nconst getJsonBody = (params) => {\r\n  return params;\r\n};\r\n\r\nexport const setHeader = (params) => {\r\n  Object.entries(params).forEach(([key, value]) => {\r\n    axios.defaults.headers.common[key] = value;\r\n  });\r\n};\r\nexport default (requestType, resourceURL, parameters, headers, config) => {\r\n  switch (requestType) {\r\n    case GET:\r\n      return new Promise((resolve, reject) => {\r\n        const queryString = getQueryString(parameters);\r\n        axios\r\n          .get(resourceURL + queryString, {\r\n            ...config,\r\n            cancelToken: new CancelToken(c => {\r\n              cancel = c;\r\n            }),\r\n            headers: headers,\r\n          })\r\n          .then(response => {\r\n            resolve(response.data);\r\n          })\r\n          .catch(error => {\r\n            reject(error);\r\n          });\r\n      });\r\n\r\n    case POST:\r\n      return new Promise((resolve, reject) => {\r\n        const jsonBody = getJsonBody(parameters);\r\n        axios\r\n          .post(resourceURL, jsonBody, {\r\n            ...config,\r\n            cancelToken: new CancelToken(c => {\r\n              cancel = c;\r\n            }),\r\n            headers: headers,\r\n          })\r\n          .then(response => {\r\n            resolve(response.data);\r\n          })\r\n          .catch(error => {\r\n            reject(error);\r\n          });\r\n      });\r\n\r\n    case PUT:\r\n      return new Promise((resolve, reject) => {\r\n        const jsonBody = getJsonBody(parameters);\r\n        axios\r\n          .put(resourceURL, jsonBody, {\r\n            ...config,\r\n            cancelToken: new CancelToken(c => {\r\n              cancel = c;\r\n            }),\r\n            headers: headers,\r\n          })\r\n          .then(response => {\r\n            resolve(response.data);\r\n          })\r\n          .catch(error => {\r\n            reject(error);\r\n          });\r\n      });\r\n\r\n    case PATCH:\r\n      return new Promise((resolve, reject) => {\r\n        const jsonBody = getJsonBody(parameters);\r\n        axios\r\n          .patch(resourceURL, jsonBody, {\r\n            ...config,\r\n            cancelToken: new CancelToken(c => {\r\n              cancel = c;\r\n            }),\r\n            headers: headers,\r\n          })\r\n          .then(response => {\r\n            resolve(response.data);\r\n          })\r\n          .catch(error => {\r\n            reject(error);\r\n          });\r\n      });\r\n\r\n    case DELETE:\r\n      return new Promise((resolve, reject) => {\r\n        const queryString = getQueryString(parameters);\r\n        axios\r\n          .delete(resourceURL + queryString, {\r\n            ...config,\r\n            cancelToken: new CancelToken(c => {\r\n              cancel = c;\r\n            }),\r\n            headers: headers,\r\n          })\r\n          .then(response => {\r\n            resolve(response.data);\r\n          })\r\n          .catch(error => {\r\n            reject(error);\r\n          });\r\n      });\r\n\r\n    default:\r\n      break;\r\n  }\r\n};\r\n","import path from \"path\";\r\nimport {sprintf} from \"sprintf-js\";\r\nimport uuid from \"uuid\";\r\nimport fs from \"fs\";\r\nimport mkdirp from \"mkdirp\";\r\nimport dateformat from \"dateformat\";\r\nimport db from \"./db\";\r\nimport consts from \"./consts\";\r\nimport tracer from \"./tracer\";\r\n\r\nconst _calculateStartPosition = (page, pageSize) => {\r\n  page || (page = 1);\r\n  pageSize || (pageSize = consts.defaultPageSize);\r\n  const start = pageSize * (page - 1);\r\n  return [start, pageSize];\r\n};\r\n\r\nconst _makeLimitClause = (page, pageSize) => {\r\n  if (!!page) {\r\n    const [start, limit] = _calculateStartPosition(page, pageSize);\r\n    return sprintf(\"LIMIT %d, %d\", start, limit);\r\n  }\r\n  return \"\";\r\n};\r\n\r\nconst _makeWhereClause = conditions => {\r\n  let conditionArr = [];\r\n  let values = [];\r\n  !!conditions && Object.keys(conditions).map(key => {\r\n    conditionArr.push(`\\`${key}\\` ${conditions[key][\"type\"]} ?`);\r\n    values.push(conditions[key][\"value\"]);\r\n  });\r\n  const clause = conditionArr.length ? \"WHERE \" + conditionArr.join(\" AND \") : \"\";\r\n  return [clause, values];\r\n};\r\n\r\nconst _makeUpdateClause = updates => {\r\n  let conditionArr = [];\r\n  let values = [];\r\n  !!updates && Object.keys(updates).map(key => {\r\n    conditionArr.push(`\\`${key}\\` = ?`);\r\n    values.push(updates[key]);\r\n  });\r\n  const clause = conditionArr.length ? \"SET \" + conditionArr.join(\", \") : \"\";\r\n  return [clause, values];\r\n};\r\n\r\nconst _makeOnDuplicateUpdateClause = values => {\r\n\r\n};\r\n\r\nconst _makeOrderClause = orders => {\r\n  let orderArr = [];\r\n  !!orders && Object.keys(orders).map(key => {\r\n    orderArr.push(`\\`${key}\\` ${orders[key]}`);\r\n  });\r\n  const orderClause = orderArr.length ? \"ORDER BY \" + orderArr.join(\", \") : \"\";\r\n  return orderClause;\r\n};\r\n\r\nexport default {\r\n  sleep: async (ms) => {\r\n    return new Promise((resolve, reject) => {\r\n      const handle = setTimeout(() => {\r\n        clearTimeout(handle);\r\n        resolve();\r\n      }, ms);\r\n    });\r\n  },\r\n\r\n  uploadFile: async (file, fileDir) => {\r\n    const fileName = sprintf(\"%s%s\", uuid(), path.extname(file.path));\r\n    const filePath = path.join(fileDir, fileName);\r\n    const writable = fs.createWriteStream(filePath);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      mkdirp.sync(fileDir, {});\r\n      file.on(\"end\", e => {\r\n        resolve(fileName);\r\n      });\r\n      file.on(\"error\", reject);\r\n      file.pipe(writable);\r\n    });\r\n  },\r\n\r\n  uploadBase64Image: async (base64, fileDir) => {\r\n    const base64Data = base64.replace(/^data:image\\/png;base64,/, \"\");\r\n    const fileName = sprintf(\"%s%s\", uuid(), \".png\");\r\n    const filePath = path.join(fileDir, fileName);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      mkdirp.sync(fileDir, {});\r\n      fs.writeFile(filePath, base64Data, \"base64\", function(err) {\r\n        if (!!err) {\r\n          reject(err);\r\n        } else {\r\n          resolve(fileName);\r\n        }\r\n      });\r\n    });\r\n  },\r\n\r\n  listQuery: async ({table, conditions, orders, page, pageSize}) => {\r\n    const [whereClause, values] = _makeWhereClause(conditions);\r\n    const orderClause = _makeOrderClause(orders);\r\n    const limitClause = _makeLimitClause(page, pageSize);\r\n    const [start, limit] = _calculateStartPosition(page, pageSize);\r\n\r\n    let sql = sprintf(\"SELECT * FROM `%s` %s %s %s;\", table, whereClause, orderClause, limitClause);\r\n\r\n    try {\r\n      let rows = await db.query(sql, values);\r\n      sql = sprintf(\"SELECT COUNT(*) `count` FROM `%s` %s;\", table, whereClause);\r\n      let count = await db.query(sql, values);\r\n      let pageCount = 0;\r\n      count.length > 0 && (pageCount = Math.ceil(count[0][\"count\"] / limit));\r\n\r\n      return {\r\n        count: count[0][\"count\"],\r\n        pageCount,\r\n        data: rows,\r\n      };\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  getQuery: async ({table, conditions, orders}) => {\r\n    const [whereClause, values] = _makeWhereClause(conditions);\r\n    const orderClause = _makeOrderClause(orders);\r\n\r\n    let sql = sprintf(\"SELECT * FROM `%s` %s %s LIMIT 1;\", table, whereClause, orderClause);\r\n    try {\r\n      let rows = await db.query(sql, values);\r\n\r\n      return rows[0];\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  updateQuery: async ({table, updates, conditions}) => {\r\n    const [updateClause, values1] = _makeUpdateClause(updates);\r\n    const [whereClause, values2] = _makeWhereClause(conditions);\r\n\r\n    let sql = sprintf(\"UPDATE `%s` %s %s;\", table, updateClause, whereClause);\r\n    // let sql = sprintf(\"DELETE FROM `%s` %s %s LIMIT 1;\", table, whereClause, orderClause);\r\n    try {\r\n      let rows = await db.query(sql, [...values1, ...values2]);\r\n\r\n      return rows;\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  deleteQuery: async ({table, conditions, orders}) => {\r\n    const [whereClause, values] = _makeWhereClause(conditions);\r\n    const orderClause = _makeOrderClause(orders);\r\n    const now = new Date();\r\n    const today = dateformat(now, \"yyyy-mm-dd\");\r\n\r\n    let sql = sprintf(\"UPDATE `%s` SET `deletedDate` = ? %s %s LIMIT 1;\", table, whereClause, orderClause);\r\n    // let sql = sprintf(\"DELETE FROM `%s` %s %s LIMIT 1;\", table, whereClause, orderClause);\r\n\r\n    try {\r\n      let rows = await db.query(sql, [today, ...values]);\r\n\r\n      return rows;\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  handleErr: (res, langs, err) => {\r\n    tracer.error(err);\r\n    tracer.error(__filename);\r\n    res.status(200).send({\r\n      result: langs.error,\r\n      message: langs.unknownServerError,\r\n      err,\r\n    });\r\n  }\r\n};\r\n","export default {\r\n  success: \"success\",\r\n  error: \"danger\",\r\n  unknownServerError: \"خطأ غير معروف في الخادم\",\r\n  emailAlreadyRegistered: \"عنوان البريد الإلكترونى مستخدم سابقا.\",\r\n  usernameAlreadyRegistered: \"وسجلت بالفعل اسم المستخدم هذا.\",\r\n  // successfullyRegistered: \"Successfully registered. Please activate your account by validation email.\",\r\n  successfullyRegistered: \"تم التسجيل بنجاح.\",\r\n  emailIsIncorrect: \"البريد الالكتروني غير صحيح.\",\r\n  emailIsNotRegistered: \"البريد الإلكتروني غير مسجل\",\r\n  usernameIsIncorrect: \"اسم المستخدم غير صحيح\",\r\n  passwordIsIncorrect: \"كلمة المرور غير صحيحة\",\r\n  yourAccountIsNotAllowed: \"حسابك غير مفعل حاليا، سيتم تفعيله بعد دقائق معدودة.\",\r\n  yourAccountIsClosed: \"حسابك مغلق. يرجى الاتصال بدعم العملاء.\",\r\n  successfullySignedIn: \"تم تسجيل الدخول بنجاح\",\r\n  successfullySignedOut: \"تم تسجيل الخروج بنجاح\",\r\n  error404: \"لم يتم العثور على\",\r\n  error500: \"خطأ غير معروف في الخادم\",\r\n  successfullySaved: \"تم الحفظ بنجاح\",\r\n  successfullyAdded: \"أضيف بنجاح\",\r\n  successfullyEdited: \"تم التعديل بنجاح\",\r\n  successfullyChanged: \"تغيرت بنجاح\",\r\n  successfullyDeleted: \"تم الحذف بنجاح\",\r\n  successfullyReset: \"إعادة تعيين بنجاح\",\r\n  currentPasswordIncorrect: \"كلمة المرور الحالية غير صحيحة.\",\r\n  failedDueToUnknownServerError: \"فشل بسبب خطأ غير معروف في الخادم\",\r\n  invalidParameters: \"معلمات غير صالحة\",\r\n  notUploaded: \"لم يتم الرفع\",\r\n  notFound: \"لم يتم العثور على\",\r\n  noData: \"ليس هنالك معلومات\",\r\n  successfullyUploaded: \"تم الرفع بنجاح\",\r\n  successfullyPosted: \"تم النشر بنجاح\",\r\n  successfullyJoined: \"تم التسجيل بنجاح\",\r\n  youHaveAlreadyJoined: \"لقد انضممت بالفعل\",\r\n  successfullySent: \"أرسلت بنجاح\",\r\n  invalidHash: \"توقيعك غير صالح.\",\r\n  invalidUser: \"معلوماتك غير صالحة.\",\r\n  notRegistered: \"انت لم تسجل.\",\r\n  male: \"ذكر\",\r\n  female: \"انثى\",\r\n  passwordIsSuccessfullyChanged: \"تم تغيير كلمة السر بنجاح\",\r\n  forgotPassword: \"إعادة تعيين كلمة المرور(Reset Password)\",\r\n  resetEmailIsSent: \"تم ارسال بريد الكتروني يحتوي على تعليمات إعادة تعيين رمز المرور الخاص بك.\",\r\n  tokenIsValid: \"الرمز صالح\",\r\n  tokenIsExpired: \"انتهت صلاحية الرمز. أعد المحاولة لإعادة تعيين كلمة المرور.\",\r\n  tokenIsNotFound: \"الرمز غير صالح. أعد المحاولة لإعادة تعيين كلمة المرور.\",\r\n  tokenIsAlreadyUsed: \"Token يستخدم بالفعل. أعد المحاولة لإعادة تعيين كلمة المرور.\",\r\n  accountIsInvalid: \"حسابك غير صالح. حاول مع واحد آخر.\",\r\n  accountIsNotRegistered: \"حسابك غير مسجل. حاول مع واحد آخر.\",\r\n  accountIsAlreadyRegistered: \"حسابك مسجل بالفعل. حاول مع واحد آخر.\",\r\n  yourAccountDoesNotSupportGoogleAuth: \"حسابك لا يدعم تسجيل الدخول إلى Google. جرب طريقة أخرى.\",\r\n  yourAccountDoesNotSupportFacebookAuth: \"حسابك لا يدعم Facebook Login. جرب طريقة أخرى.\",\r\n};\r\n","export default {\r\n  success: \"success\",\r\n  error: \"danger\",\r\n  unknownServerError: \"Unknown server error\",\r\n  emailAlreadyRegistered: \"This email is already registered.\",\r\n  usernameAlreadyRegistered: \"This username is already registered.\",\r\n  // successfullyRegistered: \"Successfully registered. Please activate your account by validation email.\",\r\n  successfullyRegistered: \"Successfully registered. Please try to sign in.\",\r\n  emailIsIncorrect: \"Email is incorrect.\",\r\n  emailIsNotRegistered: \"Email is not registered.\",\r\n  usernameIsIncorrect: \"Username is incorrect\",\r\n  passwordIsIncorrect: \"Password is incorrect\",\r\n  yourAccountIsNotAllowed: \"Your account is not allowed. Please contact Customer Support.\",\r\n  yourAccountIsClosed: \"Your account is closed. Please contact Customer Support.\",\r\n  successfullySignedIn: \"Successfully signed in\",\r\n  successfullySignedOut: \"Successfully signed out\",\r\n  error404: \"Not Fount\",\r\n  error500: \"Unknown server error\",\r\n  successfullySaved: \"Successfully saved\",\r\n  successfullyAdded: \"Successfully added\",\r\n  successfullyEdited: \"Successfully edited\",\r\n  successfullyChanged: \"Successfully changed\",\r\n  successfullyDeleted: \"Successfully Deleted\",\r\n  successfullyReset: \"Successfully Reset\",\r\n  currentPasswordIncorrect: \"Current password is incorrect.\",\r\n  failedDueToUnknownServerError: \"Failed due to unknown server error\",\r\n  invalidParameters: \"Invalid Parameters\",\r\n  notUploaded: \"Not uploaded\",\r\n  notFound: \"Not Found\",\r\n  noData: \"There is no data\",\r\n  successfullyUploaded: \"Successfully uploaded\",\r\n  successfullyPosted: \"Successfully posted\",\r\n  successfullyJoined: \"Successfully joined\",\r\n  youHaveAlreadyJoined: \"You have already joined.\",\r\n  successfullySent: \"Successfully sent\",\r\n  invalidHash: \"Your signature is invalid.\",\r\n  invalidUser: \"Your information is invalid.\",\r\n  notRegistered: \"You are not registered.\",\r\n  male: \"Male\",\r\n  female: \"Female\",\r\n  passwordIsSuccessfullyChanged: \"Password is successfully changed\",\r\n  forgotPassword: \"إعادة تعيين كلمة المرور(Reset Password)\",\r\n  resetEmailIsSent: \"An email with instructions to reset your password has been sent.\",\r\n  tokenIsValid: \"Token is valid\",\r\n  tokenIsExpired: \"Token is expired. Retry to reset the password.\",\r\n  tokenIsNotFound: \"Token is invalid. Retry to reset the password.\",\r\n  tokenIsAlreadyUsed: \"Token is already used. Retry to reset the password.\",\r\n  accountIsInvalid: \"Your account is invalid. Try with another one.\",\r\n  accountIsNotRegistered: \"Your account is not registered. Try with another one.\",\r\n  accountIsAlreadyRegistered: \"Your account is already registered. Try with another one.\",\r\n  yourAccountDoesNotSupportGoogleAuth: \"Your account does not support Google Login. Try another way.\",\r\n  yourAccountDoesNotSupportFacebookAuth: \"Your account does not support Facebook Login. Try another way.\",\r\n  successfullyActivated: \"Successfully Activated\",\r\n  successfullyDeactivated: \"Successfully Deactivated\",\r\n};\r\n","import nodemailer from \"nodemailer\";\r\nimport emailTemplates from \"email-templates\";\r\nimport {server, smtp} from \"core/config\";\r\nimport tracer from \"core/tracer\";\r\nimport {sprintf} from \"sprintf-js\";\r\n\r\nconst email = new emailTemplates({\r\n  message: {\r\n    from: {\r\n      address: smtp.user,\r\n      name: server.name,\r\n    },\r\n  },\r\n  transport: {\r\n    jsonTransport: true,\r\n  }\r\n});\r\n\r\nexport default {\r\n  sendForgotPasswordMail: (params) => {\r\n    return new Promise((resolve, reject) => {\r\n      email.render(\"../email-templates/forgot-password/html.pug\", params)\r\n        .then(html => {\r\n          let transporter = nodemailer.createTransport({\r\n            // service: smtp.service,\r\n            host: smtp.host,\r\n            port: smtp.port,\r\n            secure: smtp.secure,\r\n            auth: {\r\n              user: smtp.user, //generated by Mailtrap\r\n              pass: smtp.pass //generated by Mailtrap\r\n            },\r\n            tls: {\r\n              rejectUnauthorized: false,\r\n            }\r\n          });\r\n\r\n          const mailOptions = {\r\n            from: sprintf(\"%s <%s>\", \"PM\", smtp.user),\r\n            to: params.email,\r\n            subject: params.subject,\r\n            html,\r\n          };\r\n\r\n          transporter.sendMail(mailOptions, function (error, info) {\r\n            if (error) {\r\n              reject(error);\r\n            } else {\r\n              resolve(info);\r\n            }\r\n          });\r\n        })\r\n        .catch(reject);\r\n    });\r\n  },\r\n\r\n  sendContactUsMail: (params) => {\r\n    return new Promise((resolve, reject) => {\r\n      email.render(\"../email-templates/contact-us/html.pug\", params)\r\n        .then(html => {\r\n          let transporter = nodemailer.createTransport({\r\n            // service: smtp.service,\r\n            host: smtp.host,\r\n            port: smtp.port,\r\n            secure: smtp.secure,\r\n            auth: {\r\n              user: smtp.user, //generated by Mailtrap\r\n              pass: smtp.pass //generated by Mailtrap\r\n            },\r\n            tls: {\r\n              rejectUnauthorized: false,\r\n            }\r\n          });\r\n\r\n          const mailOptions = {\r\n            from: sprintf(\"%s <%s>\", \"PM\", smtp.user),\r\n            to: smtp.user,\r\n            subject: \"اتصل بن(Contact Us)\",\r\n            html,\r\n          };\r\n\r\n          transporter.sendMail(mailOptions, function (error, info) {\r\n            if (error) {\r\n              reject(error);\r\n            } else {\r\n              resolve(info);\r\n            }\r\n          });\r\n        })\r\n        .catch(reject);\r\n    });\r\n  },\r\n  sendCourseJoinMail: async (to, name, subject) => {\r\n    return new Promise((resolve, reject) => {\r\n      email.render(\"../email-templates/course-join/html.pug\", {})\r\n        .then((html) => {\r\n          let transporter = nodemailer.createTransport({\r\n            // service: smtp.service,\r\n            host: smtp.host,\r\n            port: smtp.port,\r\n            secure: smtp.secure,\r\n            auth: {\r\n              user: smtp.user, //generated by Mailtrap\r\n              pass: smtp.pass //generated by Mailtrap\r\n            },\r\n            tls: {\r\n              rejectUnauthorized: false,\r\n            }\r\n          });\r\n\r\n          const mailOptions = {\r\n            from: sprintf(\"%s <%s>\", name, smtp.user),\r\n            to: to,\r\n            subject: subject,\r\n            html: html,\r\n          };\r\n\r\n          transporter.sendMail(mailOptions, function (error, info) {\r\n            if (error) {\r\n              reject(error);\r\n            } else {\r\n              resolve(info);\r\n            }\r\n          });\r\n        })\r\n        .catch(reject);\r\n    });\r\n  },\r\n\r\n  sendMassMail: async (to, name, subject, message) => {\r\n    return new Promise((resolve, reject) => {\r\n      // email.render(\"../email_templates/email_verify/html.pug\", {\r\n      //   name: name,\r\n      //   subject,\r\n      //   message,\r\n      // })\r\n      //   .then((html) => {\r\n      let transporter = nodemailer.createTransport({\r\n        // service: smtp.service,\r\n        host: smtp.host,\r\n        port: smtp.port,\r\n        secure: smtp.secure,\r\n        auth: {\r\n          user: smtp.user, //generated by Mailtrap\r\n          pass: smtp.pass //generated by Mailtrap\r\n        },\r\n        tls: {\r\n          rejectUnauthorized: false,\r\n        }\r\n      });\r\n\r\n      const mailOptions = {\r\n        from: sprintf(\"%s <%s>\", name, smtp.user),\r\n        to: to,\r\n        subject: subject,\r\n        text: message,\r\n      };\r\n\r\n      // tracer.info(\"mailOptions\", mailOptions);\r\n\r\n      transporter.sendMail(mailOptions, function(error, info){\r\n        if (error) {\r\n          reject(error);\r\n        } else {\r\n          resolve(info);\r\n        }\r\n      });\r\n      //     })\r\n      //     .catch(reject);\r\n    });\r\n  },\r\n};\r\n","import crypto from \"crypto\";\r\nimport config from \"core/config\";\r\n\r\nexport default {\r\n  hmacHex: (plain) => {\r\n    const cipher = crypto.createHmac(\"sha256\", config.server.secret).update(plain).digest(\"hex\");\r\n    // console.log(\"signMessage\", plain, cipher);\r\n    return cipher;\r\n  }\r\n};\r\n","import en from \"core/i18n/en\";\r\nimport ar from \"core/i18n/ar\";\r\n\r\nexport default {\r\n    en,\r\n    ar,\r\n};\r\n","import tracerLib from \"tracer\";\r\n\r\nexport default tracerLib.colorConsole({\r\n  format : [\r\n    \"{{timestamp}} {{file}}:{{line}} <{{title}}> {{message}}\",\r\n    {\r\n      error : \"{{timestamp}} {{file}}:{{line}} <{{title}}> {{message}}\\nCall Stack:\\n{{stack}}\" // error format\r\n    }\r\n  ],\r\n  dateformat : \"HH:MM:ss.L\",\r\n  preprocess :  data => {\r\n    data.title = data.title.toUpperCase();\r\n  },\r\n});\r\n","import express from \"express\";\r\n\r\nimport authRouter from \"./admin-api/auth\";\r\nimport profileRouter from \"./admin-api/profile\";\r\nimport usersRouter from \"./admin-api/users\";\r\nimport aboutRouter from \"./admin-api/about\";\r\nimport massEmailRouter from \"./admin-api/mass-email\";\r\n\r\nconst router = express.Router();\r\n\r\n// router.use(\"/auth\", authRouter);\r\n// router.use(\"/profile\",profileRouter);\r\n// router.use(\"/users\", usersRouter);\r\n// router.use(\"/about\", aboutRouter);\r\n// router.use(\"/mass-email\", massEmailRouter);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport {sprintf} from \"sprintf-js\";\r\nimport dateformat from \"dateformat\";\r\nimport path from \"path\";\r\nimport uuid from \"uuid\";\r\nimport fs from \"fs\";\r\nimport mkdirp from \"mkdirp\";\r\nimport {dbTblName} from \"core/config\";\r\nimport db from \"core/db\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport helpers from \"core/helpers\";\r\n\r\nconst loadAboutUs = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n\r\n  let sql = sprintf(\"SELECT * FROM `%s`;\", dbTblName.aboutUs);\r\n\r\n  try {\r\n    let rows = await db.query(sql);\r\n    let data = {\r\n      brochure: \"\",\r\n      video: \"\",\r\n    };\r\n    if (rows.length > 0) {\r\n      data = rows[0];\r\n    }\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst saveAboutUs = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {scope, brochure, video} = req.body;\r\n\r\n  const today = new Date();\r\n  const date = dateformat(today, \"yyyy-mm-dd\");\r\n  const time = dateformat(today, \"hh:MM TT\");\r\n  const timestamp = today.getTime();\r\n\r\n  const appDir = process.cwd();\r\n  const fileDir = path.join(appDir, \"public\", consts.uploadPath.aboutUs);\r\n\r\n  const brochureName = sprintf(\"%s%s\", uuid(), path.extname(brochure.path));\r\n  const brochurePath = path.join(fileDir, brochureName);\r\n  const brochureWritable = fs.createWriteStream(brochurePath);\r\n  const brochureMedia = sprintf(\"%s/%s\", consts.uploadPath.aboutUs, brochureName);\r\n\r\n  const videoName = sprintf(\"%s%s\", uuid(), path.extname(video.path));\r\n  const videoPath = path.join(fileDir, videoName);\r\n  const videoWritable = fs.createWriteStream(videoPath);\r\n  const videoMedia = sprintf(\"%s/%s\", consts.uploadPath.aboutUs, videoName);\r\n  mkdirp(fileDir, () => {\r\n    brochure.on(\"end\", async e => {\r\n      video.on(\"end\", async e => {\r\n        let sql;\r\n        let rows;\r\n        if (scope) {\r\n          sql = sprintf(\"SELECT * FROM `%s` WHERE `scope` = ?;\", dbTblName.aboutUs);\r\n          rows = await db.query(sql, [scope]);\r\n          if (rows.length > 0) {\r\n            let oldFilename = path.join(fileDir, path.basename(rows[0][\"brochure\"]));\r\n            tracer.debug(oldFilename);\r\n            fs.unlink(oldFilename, e => {\r\n\r\n            });\r\n            oldFilename = path.join(fileDir, path.basename(rows[0][\"video\"]));\r\n            tracer.debug(oldFilename);\r\n            fs.unlink(oldFilename, e => {\r\n\r\n            });\r\n          }\r\n        }\r\n\r\n        const newRows = [\r\n          [scope || null, brochureMedia, videoMedia],\r\n        ];\r\n        sql = sprintf(\"INSERT INTO `%s` VALUES ? ON DUPLICATE KEY UPDATE `brochure` = VALUES(`brochure`), `video` = VALUES(`video`);\", dbTblName.aboutUs);\r\n        try {\r\n          rows = await db.query(sql, [newRows]);\r\n          res.status(200).send({\r\n            result: langs.success,\r\n            message: langs.successfullySaved,\r\n            data: rows,\r\n          });\r\n        } catch (err) {\r\n          helpers.handleErr(res, langs, err);\r\n        }\r\n      });\r\n      video.on(\"error\", err => {\r\n        helpers.handleErr(res, langs, err);\r\n      });\r\n      video.pipe(videoWritable);\r\n    });\r\n    brochure.on(\"error\", err => {\r\n      helpers.handleErr(res, langs, err);\r\n    });\r\n    brochure.pipe(brochureWritable);\r\n  });\r\n};\r\n\r\nconst saveAboutUsBrochure = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {scope, brochure, originBrochure} = req.body;\r\n\r\n  const today = new Date();\r\n  const date = dateformat(today, \"yyyy-mm-dd\");\r\n  const time = dateformat(today, \"hh:MM TT\");\r\n  const timestamp = today.getTime();\r\n\r\n  const appDir = process.cwd();\r\n  const fileDir = path.join(appDir, \"public\", consts.uploadPath.aboutUs);\r\n\r\n  const brochureName = sprintf(\"%s%s\", uuid(), path.extname(brochure.path));\r\n  const brochurePath = path.join(fileDir, brochureName);\r\n  const brochureWritable = fs.createWriteStream(brochurePath);\r\n  const brochureMedia = sprintf(\"%s/%s\", consts.uploadPath.aboutUs, brochureName);\r\n  mkdirp(fileDir, () => {\r\n    brochure.on(\"end\", async e => {\r\n      let sql;\r\n      let rows;\r\n      if (scope) {\r\n        sql = sprintf(\"SELECT * FROM `%s` WHERE `scope` = ?;\", dbTblName.aboutUs);\r\n        rows = await db.query(sql, [scope]);\r\n        if (rows.length > 0) {\r\n          let oldFilename = path.join(fileDir, path.basename(rows[0][\"brochure\"]));\r\n          tracer.debug(oldFilename);\r\n          fs.unlink(oldFilename, e => {\r\n\r\n          });\r\n        }\r\n      }\r\n\r\n      const newRows = [\r\n        [scope || null, brochureMedia, originBrochure, \"\", \"\"],\r\n      ];\r\n      sql = sprintf(\"INSERT INTO `%s` VALUES ? ON DUPLICATE KEY UPDATE `brochure` = VALUES(`brochure`), `originBrochure` = VALUES(`originBrochure`);\", dbTblName.aboutUs);\r\n      try {\r\n        rows = await db.query(sql, [newRows]);\r\n        res.status(200).send({\r\n          result: langs.success,\r\n          message: langs.successfullySaved,\r\n          data: {\r\n            originBrochure,\r\n          },\r\n        });\r\n      } catch (err) {\r\n        helpers.handleErr(res, langs, err);\r\n      }\r\n    });\r\n    brochure.on(\"error\", err => {\r\n      helpers.handleErr(res, langs, err);\r\n    });\r\n    brochure.pipe(brochureWritable);\r\n  });\r\n};\r\n\r\nconst saveAboutUsVideo = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {scope, brochure, video, originVideo} = req.body;\r\n\r\n  const today = new Date();\r\n  const date = dateformat(today, \"yyyy-mm-dd\");\r\n  const time = dateformat(today, \"hh:MM TT\");\r\n  const timestamp = today.getTime();\r\n\r\n  const appDir = process.cwd();\r\n  const fileDir = path.join(appDir, \"public\", consts.uploadPath.aboutUs);\r\n\r\n  const videoName = sprintf(\"%s%s\", uuid(), path.extname(video.path));\r\n  const videoPath = path.join(fileDir, videoName);\r\n  const videoWritable = fs.createWriteStream(videoPath);\r\n  const videoMedia = sprintf(\"%s/%s\", consts.uploadPath.aboutUs, videoName);\r\n  mkdirp(fileDir, () => {\r\n    video.on(\"end\", async e => {\r\n      let sql;\r\n      let rows;\r\n      if (scope) {\r\n        sql = sprintf(\"SELECT * FROM `%s` WHERE `scope` = ?;\", dbTblName.aboutUs);\r\n        rows = await db.query(sql, [scope]);\r\n        if (rows.length > 0) {\r\n          let\r\n          oldFilename = path.join(fileDir, path.basename(rows[0][\"video\"]));\r\n          tracer.debug(oldFilename);\r\n          fs.unlink(oldFilename, e => {\r\n\r\n          });\r\n        }\r\n      }\r\n\r\n      const newRows = [\r\n        [scope || null, \"\", \"\", videoMedia, originVideo],\r\n      ];\r\n      sql = sprintf(\"INSERT INTO `%s` VALUES ? ON DUPLICATE KEY UPDATE `video` = VALUES(`video`), `originVideo` = VALUES(`originVideo`);\", dbTblName.aboutUs);\r\n      try {\r\n        rows = await db.query(sql, [newRows]);\r\n        res.status(200).send({\r\n          result: langs.success,\r\n          message: langs.successfullySaved,\r\n          data: {\r\n            originVideo,\r\n          },\r\n        });\r\n      } catch (err) {\r\n        helpers.handleErr(res, langs, err);\r\n      }\r\n    });\r\n    video.on(\"error\", err => {\r\n      helpers.handleErr(res, langs, err);\r\n    });\r\n    video.pipe(videoWritable);\r\n  });\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/load-aboutus\", loadAboutUs);\r\nrouter.post(\"/save-aboutus\", saveAboutUs);\r\nrouter.post(\"/save-aboutus-brochure\", saveAboutUsBrochure);\r\nrouter.post(\"/save-aboutus-video\", saveAboutUsVideo);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport {sprintf} from \"sprintf-js\";\r\nimport {dbTblName, session} from \"core/config\";\r\nimport db from \"core/db\";\r\nimport myCrypto from \"core/myCrypto\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport helpers from \"core/helpers\";\r\n\r\nconst signInProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {email, password} = req.body;\r\n\r\n  let sql = sprintf(\"SELECT `email` FROM `%s` WHERE BINARY `email` = ? AND `allow` = ?;\", dbTblName.admins);\r\n  try {\r\n    let rows = await db.query(sql, [email, 1]);\r\n    if (rows.length === 0) {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.emailIsNotRegistered,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const hash = myCrypto.hmacHex(password);\r\n    sql = sprintf(\"SELECT U.* FROM `%s` U WHERE BINARY U.email = ? AND BINARY U.hash = ? AND `allow` = ?;\", dbTblName.admins);\r\n    rows = await db.query(sql, [email, hash, 1]);\r\n\r\n    if (rows.length === 0) {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.passwordIsIncorrect,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const user = rows[0];\r\n    const token = jwt.sign(\r\n      {\r\n        id: user[\"id\"],\r\n        email: user[\"email\"],\r\n        username: user[\"username\"],\r\n      },\r\n      session.secretAdmin,\r\n      {\r\n        // expiresIn: '5m',\r\n      },\r\n    );\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullySignedIn,\r\n      data: {\r\n        user,\r\n        token,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst signUpProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {email, password, username, role} = req.body;\r\n  const hash = myCrypto.hmacHex(password);\r\n\r\n  let sql = sprintf(\"SELECT `email` FROM `%s` WHERE BINARY `email` = ?;\", dbTblName.admins);\r\n  try {\r\n    let rows = await db.query(sql, [email]);\r\n    if (rows.length > 0) {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.emailAlreadyRegistered,\r\n      });\r\n      return;\r\n    }\r\n    const newRows = [\r\n      [null, email, hash, username, role, 0],\r\n    ];\r\n    console.log(newRows);\r\n    sql = sprintf(\"INSERT INTO `%s` VALUES ?;\", dbTblName.admins);\r\n    await db.query(sql, [newRows]);\r\n\r\n    // sendVerificationEmail(email);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullyRegistered,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/sign-in\", signInProc);\r\nrouter.post(\"/sign-up\", signUpProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport {sprintf} from \"sprintf-js\";\r\nimport config, {dbTblName, smtp} from \"core/config\";\r\nimport db from \"core/db\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport mailer from \"core/mailer\";\r\nimport helpers from \"core/helpers\";\r\n\r\n\r\nconst sendProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {name, subject, message} = req.body;\r\n\r\n  try {\r\n    let sql = sprintf(\"SELECT * FROM `%s`;\", dbTblName.users);\r\n    let rows = await db.query(sql);\r\n    let to = [];\r\n    let result = [];\r\n    for (let row of rows) {\r\n      // mailer.sendMassMail(row['email'], subject, message);\r\n      to.push(row[\"email\"]);\r\n      if (to.length >= smtp.limit.receipt) {\r\n        result.push(await mailer.sendMassMail(to.join(\",\"), name, subject, message));\r\n        to = [];\r\n        await helpers.sleep(60000 / smtp.limit.message);\r\n      }\r\n    }\r\n    if (!!to.length) {\r\n      result.push(await mailer.sendMassMail(to.join(\",\"), name, subject, message));\r\n    }\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullySent,\r\n      // data: result,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/send\", sendProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport {sprintf} from \"sprintf-js\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport {dbTblName, session} from \"core/config\";\r\nimport db from \"core/db\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport myCrypto from \"core/myCrypto\";\r\nimport helpers from \"core/helpers\";\r\n\r\nconst saveProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  let {id, email, username} = req.body;\r\n\r\n  const newRows = [\r\n    [id, email, \"\", username, \"\", 0],\r\n  ];\r\n\r\n  let sql = sprintf(\"INSERT INTO `%s` VALUES ? ON DUPLICATE KEY UPDATE `email` = VALUES(`email`), `username` = VALUES(`username`);\", dbTblName.admins);\r\n  try {\r\n    let rows = await db.query(sql, [newRows]);\r\n    const token = jwt.sign(\r\n      {\r\n        id: id,\r\n        email: email,\r\n        username: username,\r\n      },\r\n      session.secret\r\n    );\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullySaved,\r\n      data: {\r\n        user: {id, email, username},\r\n        token,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst changePasswordProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  let {id, password0, password} = req.body;\r\n\r\n  const hash0 = myCrypto.hmacHex(password0 || \"\");\r\n  const hash = myCrypto.hmacHex(password || \"\");\r\n\r\n  let sql = sprintf(\"SELECT * FROM `%s` WHERE `id` = ? AND `hash` = ?;\", dbTblName.admins);\r\n  try {\r\n    let rows = await db.query(sql, [id, hash0]);\r\n    if (rows.length === 0) {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.currentPasswordIncorrect,\r\n      });\r\n      return;\r\n    }\r\n    sql = sprintf(\"UPDATE `%s` SET `hash` = ? WHERE `id` = ?;\", dbTblName.admins);\r\n    await db.query(sql, [hash, id]);\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullyChanged,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/save\", saveProc);\r\nrouter.post(\"/change-password\", changePasswordProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport {sprintf} from \"sprintf-js\";\r\nimport dateformat from \"dateformat\";\r\nimport {dbTblName} from \"core/config\";\r\nimport db from \"core/db\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport helpers from \"core/helpers\";\r\n\r\nconst _loadData = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  let {page, pageSize, userId, scope, search} = req.body;\r\n  page || (page = 1);\r\n  pageSize || (pageSize = consts.defaultPageSize);\r\n\r\n  const start = pageSize * (page - 1);\r\n\r\n  search = `%${search}%`;\r\n\r\n  let allowedWhere = \"\";\r\n  if (scope === \"new\") {\r\n    allowedWhere = \"AND `allowedDate` = ''\";\r\n  }\r\n\r\n  let sql = sprintf(\"SELECT * FROM `%s` WHERE `deletedDate` = ? AND (`email` LIKE ? OR `username` LIKE ? AND `firstName` LIKE ? AND `lastName` LIKE ? AND `jobTitle` LIKE ? AND `sector` LIKE ? AND `company` LIKE ? AND `city` LIKE ? AND `phone` LIKE ?) %s ORDER BY `createdDate` DESC LIMIT ?, ?;\", dbTblName.users, allowedWhere);\r\n  // let sql = sprintf(\"SELECT * FROM `%s` WHERE `deletedDate` = ? %s ORDER BY LENGTH(`allowedDate`) ASC, `createdDate` DESC LIMIT ?, ?;\", dbTblName.users, allowedWhere);\r\n\r\n  // tracer.info(sql);\r\n\r\n  try {\r\n    let rows = await db.query(sql, [\"\", search, search, search, search, search, search, search, search, search, start, pageSize]);\r\n    let number = start + 1;\r\n    for (let row of rows) {\r\n      row[\"number\"] = number++;\r\n      row[\"gender\"] = row[\"gender\"] === consts.male ? langs.male : langs.female;\r\n    }\r\n\r\n    sql = sprintf(\"SELECT COUNT(`id`) `count` FROM `%s` WHERE `deletedDate` = ? AND (`email` LIKE ? OR `username` LIKE ? AND `firstName` LIKE ? AND `lastName` LIKE ? AND `jobTitle` LIKE ? AND `sector` LIKE ? AND `company` LIKE ? AND `city` LIKE ? AND `phone` LIKE ?) %s;\", dbTblName.users, allowedWhere);\r\n\r\n    let count = await db.query(sql, [\"\", search, search, search, search, search, search, search, search, search]);\r\n    let pageCount = 0;\r\n    count.length > 0 && (pageCount = Math.ceil(count[0][\"count\"] / pageSize));\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      count: count[0][\"count\"],\r\n      pageCount,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst listProc = async (req, res, next) => {\r\n  _loadData(req, res, next)\r\n};\r\n\r\nconst allowProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id, allow} = req.body;\r\n\r\n  const today = new Date();\r\n  const date = dateformat(today, \"yyyy-mm-dd\");\r\n\r\n  let sql = sprintf(\"UPDATE `%s` SET `allowedDate` = ? WHERE `id` = ?;\", dbTblName.users);\r\n  try {\r\n    await db.query(sql, [!!allow ? date : \"\", id]);\r\n\r\n    _loadData(req, res, next);\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst deleteProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id} = req.body;\r\n\r\n  const today = new Date();\r\n  const date = dateformat(today, \"yyyy-mm-dd\");\r\n\r\n  let sql = sprintf(\"UPDATE `%s` SET `deletedDate` = ? WHERE `id` = ?;\", dbTblName.users);\r\n  try {\r\n    await db.query(sql, [date, id]);\r\n\r\n    _loadData(req, res, next);\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst saveProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id, email, username, firstName, fatherName, lastName, gender, birthday, jobTitle, sector, company, city, phone} = req.body;\r\n\r\n  const today = new Date();\r\n  const date = dateformat(today, \"yyyy-mm-dd\");\r\n\r\n  let sql = sprintf(\"UPDATE `%s` SET `email` = ?, `username` = ?, `firstName` = ?, `fatherName` = ?, `lastName` = ?, `gender` = ?, `birthday` = ?, `jobTitle` = ?, `sector` = ?, `company` = ?, `city` = ?, `phone` = ?, `modifiedDate` = ? WHERE `id` = ?;\", dbTblName.users);\r\n  try {\r\n    await db.query(sql, [email, username, firstName, fatherName, lastName, gender, birthday, jobTitle, sector, company, city, phone, date, id]);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullySaved,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst getProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id} = req.body;\r\n\r\n  let sql = sprintf(\"SELECT * FROM `%s` WHERE `id` = ?;\", dbTblName.users);\r\n  try {\r\n    let rows = await db.query(sql, [id]);\r\n\r\n    if (rows.length === 0) {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.noData,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const row = rows[0];\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data: row,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst countProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n\r\n  let sql = sprintf(\"SELECT (SELECT COUNT(`id`) FROM `%s` WHERE `deletedDate` = ?) `count`, (SELECT COUNT(`id`) FROM `%s` WHERE `allowedDate` = ? AND `deletedDate` = ?) `countAwaiting`;\", dbTblName.users, dbTblName.users);\r\n\r\n  try {\r\n    let rows = await db.query(sql, [\"\", \"\", \"\"]);\r\n    if (rows.length === 0) {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.noData,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const row = rows[0];\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data: {\r\n        count: row.count,\r\n        countAwaiting: row.countAwaiting,\r\n      }\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst signInHistoryProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {days} = req.body;\r\n\r\n  const today = new Date();\r\n  const before = new Date(today.getTime() - (days || 15) * 24 * 3600000);\r\n  const startDate = dateformat(before, \"yyyy-mm-dd\");\r\n  const endDate = dateformat(today, \"yyyy-mm-dd\");\r\n\r\n  let sql = sprintf(\"SELECT `date`, COUNT(`date`) `count` FROM `%s` WHERE `date` BETWEEN ? AND ? GROUP BY `date` ORDER BY `date` ASC;\", dbTblName.usersSigninHistory);\r\n\r\n  try {\r\n    let rows = await db.query(sql, [startDate, endDate]);\r\n    for (let row of rows) {\r\n      // row[\"date\"] = sprintf(\"%s GMT\", dateformat(new Date(row[\"date\"]), \"mm-dd-yyyy\"));\r\n      row[\"date\"] = new Date(row[\"date\"]).getTime();\r\n    }\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst countPerGenderProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n\r\n  let sql = sprintf(\"SELECT `gender`, COUNT(`id`) `count` FROM `%s` GROUP BY `gender`;\", dbTblName.users);\r\n\r\n  try {\r\n    let rows = await db.query(sql);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/list\", listProc);\r\nrouter.post(\"/allow\", allowProc);\r\nrouter.post(\"/delete\", deleteProc);\r\nrouter.post(\"/get\", getProc);\r\nrouter.post(\"/save\", saveProc);\r\nrouter.post(\"/count\", countProc);\r\nrouter.post(\"/sign-in-history\", signInHistoryProc);\r\nrouter.post(\"/count-per-gender\", countPerGenderProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport expressJwt from \"express-jwt\";\r\nimport {session} from \"core/config\";\r\n\r\nimport authRouter from \"./api/auth\";\r\nimport coreRouter from \"./api/core\";\r\nimport accountRouter from \"./api/account\";\r\nimport hireRouter from \"./api/hire\";\r\nimport workRouter from \"./api/work\";\r\nimport profileRouter from \"./api/profile\";\r\nimport aboutRouter from \"./api/about\";\r\n\r\nconst router = express.Router();\r\n\r\nrouter.use(\"/\", expressJwt({secret: session.secret})\r\n  .unless({\r\n    path: [\r\n      /\\/auth\\/*/,\r\n      /\\/core\\/*/,\r\n    ]\r\n  }));\r\n\r\nrouter.use(\"/auth\", authRouter);\r\nrouter.use(\"/core\", coreRouter);\r\nrouter.use(\"/account\", accountRouter);\r\nrouter.use(\"/hire\", hireRouter);\r\nrouter.use(\"/work\", workRouter);\r\n// router.use(\"/profile\", profileRouter);\r\nrouter.use(\"/about\", aboutRouter);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport {sprintf} from \"sprintf-js\";\r\nimport dateformat from \"dateformat\";\r\nimport path from \"path\";\r\nimport uuid from \"uuid\";\r\nimport fs from \"fs\";\r\nimport mkdirp from \"mkdirp\";\r\nimport {dbTblName} from \"core/config\";\r\nimport db from \"core/db\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport helpers from \"core/helpers\";\r\n\r\nconst loadAboutUs = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n\r\n  let sql = sprintf(\"SELECT * FROM `%s`;\", dbTblName.aboutUs);\r\n\r\n  try {\r\n    let rows = await db.query(sql);\r\n    let data = {\r\n      brochure: \"\",\r\n      video: \"\",\r\n    };\r\n    if (rows.length > 0) {\r\n      data = rows[0];\r\n    }\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/load-aboutus\", loadAboutUs);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport {sprintf} from \"sprintf-js\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport dateformat from \"dateformat\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport {dbTblName, session} from \"core/config\";\r\nimport db from \"core/db\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts, {avatar} from \"core/consts\";\r\nimport myCrypto from \"core/myCrypto\";\r\nimport helpers from \"core/helpers\";\r\nimport {accountTypes} from \"core/consts\";\r\n\r\nconst avatarProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id} = req.body;\r\n\r\n  let sql = sprintf(\"SELECT * FROM `%s` WHERE `id` = ?;\", dbTblName.core.avatars);\r\n  try {\r\n    let rows = await db.query(sql, [id]);\r\n    if (!!rows.length) {\r\n      const row = rows[0];\r\n      res.status(200).send({\r\n        result: langs.success,\r\n        data: {\r\n          url: !!row.url.length ? row.url : avatar.DEFAULT_AVATAR,\r\n          originUrl: !!row.originUrl.length ? row.originUrl : avatar.DEFAULT_AVATAR,\r\n          scale: row.scale,\r\n          borderRadius: row.borderRadius,\r\n          position: {\r\n            x: row.xPosition,\r\n            y: row.yPosition,\r\n          },\r\n          rotate: row.rotate,\r\n        },\r\n      });\r\n    } else {\r\n      res.status(200).send({\r\n        result: langs.success,\r\n        data: {\r\n          url: avatar.DEFAULT_AVATAR,\r\n          originUrl: avatar.DEFAULT_AVATAR,\r\n          scale: 1,\r\n          borderRadius: 0,\r\n          position: {\r\n            x: 0.5,\r\n            y: 0.5,\r\n          },\r\n          rotate: 0,\r\n        },\r\n      });\r\n    }\r\n  } catch (err) {\r\n    res.status(200).send({\r\n      result: langs.error,\r\n      message: langs.unknownServerError,\r\n    });\r\n  }\r\n};\r\n\r\nconst saveAvatarProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id, file, base64, scale, borderRadius, xPosition, yPosition, rotate} = req.body;\r\n\r\n  const today = new Date();\r\n  const date = dateformat(today, \"yyyy-mm-dd\");\r\n  // const time = dateformat(today, \"hh:MM TT\");\r\n  // const timestamp = today.getTime();\r\n\r\n  const appDir = process.cwd();\r\n  const fileDir = path.join(appDir, \"public\", consts.uploadPath.avatars);\r\n  let fileName = \"\";\r\n  if (!!file) {\r\n    fileName = await helpers.uploadFile(file, fileDir);\r\n  }\r\n  let originUrl = sprintf(\"%s/%s\", consts.uploadPath.avatars, fileName);\r\n\r\n  let fileName2 = await helpers.uploadBase64Image(base64, fileDir);\r\n  let url = sprintf(\"%s/%s\", consts.uploadPath.avatars, fileName2);\r\n\r\n  let sql;\r\n  let rows;\r\n  let row;\r\n  if (!!id) {\r\n    sql = sprintf(\"SELECT * FROM `%s` WHERE `id` = ?;\", dbTblName.core.avatars);\r\n    rows = await db.query(sql, [id]);\r\n    if (rows.length > 0) {\r\n      row = rows[0];\r\n      let oldFilename = path.join(fileDir, path.basename(row[\"originUrl\"]));\r\n      !!file && fs.unlink(oldFilename, e => {\r\n\r\n      });\r\n      oldFilename = path.join(fileDir, path.basename(row[\"url\"]));\r\n      !!fileName2.length && fs.unlink(oldFilename, e => {\r\n\r\n      });\r\n    }\r\n  }\r\n\r\n  if (!fileName2.length) {\r\n    url = !!row ? row.url : \"\";\r\n  }\r\n\r\n  if (!fileName.length) {\r\n    originUrl = !!row ? row.originUrl : \"\";\r\n  }\r\n\r\n  const newRows = [\r\n    [id, url, originUrl, scale, borderRadius, xPosition, yPosition, rotate],\r\n  ];\r\n  sql = sprintf(\"INSERT INTO `%s` VALUES ? ON DUPLICATE KEY UPDATE `url` = VALUES(`url`), `originUrl` = VALUES(`originUrl`), `scale` = VALUES(`scale`), `borderRadius` = VALUES(`borderRadius`), `xPosition` = VALUES(`xPosition`), `yPosition` = VALUES(`yPosition`), `rotate` = VALUES(`rotate`);\", dbTblName.core.avatars);\r\n  try {\r\n    rows = await db.query(sql, [newRows]);\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullySaved,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst changePasswordProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  let {id, password0, password} = req.body;\r\n\r\n  const hash0 = myCrypto.hmacHex(password0 || \"\");\r\n  const hash = myCrypto.hmacHex(password || \"\");\r\n\r\n  let sql = sprintf(\"SELECT * FROM `%s` WHERE `id` = ? AND `hash` = ?;\", dbTblName.core.users);\r\n  try {\r\n    let rows = await db.query(sql, [id, hash0]);\r\n    if (rows.length === 0) {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.currentPasswordIncorrect,\r\n      });\r\n      return;\r\n    }\r\n    sql = sprintf(\"UPDATE `%s` SET `hash` = ? WHERE `id` = ?;\", dbTblName.core.users);\r\n    await db.query(sql, [hash, id]);\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.passwordIsSuccessfullyChanged,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst savePersonalInfoProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  let {id, firstName, fatherName, lastName, nationalityId, countryId, cityId, birthday, gender, email, phone, website, countryCode} = req.body;\r\n\r\n  try {\r\n    const newRow = [firstName, fatherName, lastName, nationalityId, countryId, cityId, birthday, gender, email, phone, website, countryCode];\r\n    let sql = sprintf(\"UPDATE `%s` SET `firstName` = ?, `fatherName` = ?, `lastName` = ?, `nationalityId` = ?, `countryId` = ?, `cityId` = ?, `birthday` = ?, `gender` = ?, `email` = ?, `phone` = ?, `website` = ?, `countryCode` = ? WHERE `id` = ?;\", dbTblName.core.users);\r\n    await db.query(sql, [...newRow, id]);\r\n\r\n    const token = jwt.sign(\r\n      {\r\n        id: id,\r\n        email: email,\r\n        firstName: firstName,\r\n        lastName: lastName,\r\n      },\r\n      session.secret\r\n    );\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullySaved,\r\n      data: {\r\n        user: {id, firstName, fatherName, lastName, nationalityId, countryId, cityId, birthday, gender, email, phone, website, countryCode},\r\n        token,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/avatar\", avatarProc);\r\nrouter.post(\"/save-avatar\", saveAvatarProc);\r\nrouter.post(\"/change-password\", changePasswordProc);\r\nrouter.post(\"/save-personal-info\", savePersonalInfoProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport {sprintf} from \"sprintf-js\";\r\nimport dateformat from \"dateformat\";\r\n\r\nimport config, {dbTblName, session} from \"core/config\";\r\nimport db from \"core/db\";\r\nimport myCrypto from \"core/myCrypto\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts, {accountTypes, auth, resetPasswordUri, social, tokenStatus} from \"core/consts\";\r\nimport mailer from \"core/mailer\";\r\nimport fetch, {GET} from \"core/fetch\";\r\nimport helpers from \"core/helpers\";\r\n\r\nconst _validateToken = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {email, token} = req.body;\r\n  const today = new Date();\r\n  const timestamp = today.getTime();\r\n\r\n  try {\r\n    let sql = sprintf(\"SELECT * FROM `%s` WHERE `email` = ? AND `token` = ?;\", dbTblName.resetPasswordTokens);\r\n    let rows = await db.query(sql, [email, token]);\r\n    if (!rows.length) {\r\n      return tokenStatus.NOT_FOUND;\r\n    }\r\n\r\n    const row = rows[0];\r\n\r\n    if (timestamp >= row.expire) {\r\n      return tokenStatus.EXPIRED;\r\n    }\r\n\r\n    const used = myCrypto.hmacHex(`${row.timestamp}${row.token}${row.expire}`);\r\n    if (used !== row.used) {\r\n      return tokenStatus.ALREADY_USED;\r\n    }\r\n\r\n    return tokenStatus.VALID;\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n};\r\n\r\nconst _validateGoogleAccount = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {googleId, email, id_token} = req.body;\r\n\r\n  const url = \"https://www.googleapis.com/oauth2/v3/tokeninfo\";\r\n  const params = {\r\n    id_token,\r\n  };\r\n\r\n  try {\r\n    const data = await fetch(GET, url, params);\r\n    let sql = sprintf(\"SELECT U.*, A.accountType FROM `%s` U LEFT JOIN `%s` A ON A.id = U.id WHERE U.social = ? AND U.socialId = ?;\", dbTblName.users, dbTblName.accountSettings);\r\n\r\n    let rows = await db.query(sql, [social.name.GOOGLE, data.sub]);\r\n\r\n    let registered = !!rows.length;\r\n    const invalidToken = data.sub !== googleId;\r\n\r\n    let result = {...data, registered, invalidToken};\r\n    if (!!registered) {\r\n      result = Object.assign({}, result, {...rows[0], accountType: rows[0][\"accountType\"] || accountTypes.WORK})\r\n    }\r\n\r\n    sql = sprintf(\"SELECT U.*, A.accountType FROM `%s` U LEFT JOIN `%s` A ON A.id = U.id WHERE U.email = ?;\", dbTblName.users, dbTblName.accountSettings);\r\n\r\n    rows = await db.query(sql, [data.email, social.name.GOOGLE]);\r\n\r\n    registered = !!rows.length;\r\n\r\n    result = {...result, emailRegistered: registered};\r\n\r\n    return result;\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n};\r\n\r\nconst _validateFacebookAccount = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {socialId, accessToken} = req.body;\r\n\r\n  const url = \"https://graph.facebook.com/v2.3/me\";\r\n  const params = {\r\n    access_token: accessToken,\r\n  };\r\n\r\n  try {\r\n    const data = await fetch(GET, url, params);\r\n    let sql = sprintf(\"SELECT U.*, A.accountType FROM `%s` U LEFT JOIN `%s` A ON A.id = U.id WHERE U.social = ? AND U.socialId = ?;\", dbTblName.users, dbTblName.accountSettings);\r\n\r\n    let rows = await db.query(sql, [social.name.FACEBOOK, socialId]);\r\n\r\n    let registered = !!rows.length;\r\n    const invalidToken = data.id !== socialId;\r\n    \r\n    let result = {...data, registered, invalidToken};\r\n    if (!!registered) {\r\n      result = Object.assign({}, result, {...rows[0], accountType: rows[0][\"accountType\"] || accountTypes.WORK})\r\n    }\r\n\r\n    return result;\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n};\r\n\r\nconst signInProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {email, password} = req.body;\r\n\r\n  let sql = sprintf(\"SELECT `email` FROM `%s` WHERE `email` = ?;\", dbTblName.core.users);\r\n  try {\r\n    let rows = await db.query(sql, [email]);\r\n    if (rows.length === 0) {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.emailIsNotRegistered,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const hash = myCrypto.hmacHex(password);\r\n    sql = sprintf(\"SELECT * FROM `%s` WHERE `email` = ? AND BINARY `hash` = ?;\", dbTblName.core.users);\r\n    rows = await db.query(sql, [email, hash]);\r\n\r\n    if (rows.length === 0) {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.passwordIsIncorrect,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const user = rows[0];\r\n\r\n    if (user.deletedDate.length > 0) {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.yourAccountIsClosed,\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (user.allowedDate.length === 0) {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.yourAccountIsNotAllowed,\r\n      });\r\n      return;\r\n    }\r\n\r\n    sql = sprintf(\"SELECT * FROM `%s` WHERE `id` = ?;\", dbTblName.hire.accounts);\r\n    const hire = await db.query(sql, [user.hireId]);\r\n\r\n    sql = sprintf(\"SELECT * FROM `%s` WHERE `id` = ?\", dbTblName.work.accounts);\r\n    const work = await db.query(sql, [user.workId]);\r\n\r\n    const token = jwt.sign(\r\n      {\r\n        id: user[\"id\"],\r\n        email: user[\"email\"],\r\n        firstName: user[\"firstName\"],\r\n        fatherName: user[\"fatherName\"],\r\n        lastName: user[\"lastName\"],\r\n      },\r\n      session.secret\r\n    );\r\n\r\n    const today = new Date();\r\n    const date = dateformat(today, \"yyyy-mm-dd\");\r\n    const time = dateformat(today, \"hh:MM TT\");\r\n    const timestamp = today.getTime();\r\n    const remoteAddress = req.header[\"x-forwarded-for\"] || req.connection.remoteAddress;\r\n    const newRows = [\r\n      [null, user.id, timestamp, date, time, remoteAddress]\r\n    ];\r\n    sql = sprintf(\"INSERT INTO `%s` VALUES ?;\", dbTblName.core.signInHistory);\r\n    await db.query(sql, [newRows]);\r\n\r\n    const accountType = user[\"accountType\"] || accountTypes.WORK;\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullySignedIn,\r\n      data: {\r\n        user: {...user},\r\n        hire: !!hire.length ? hire[0] : {},\r\n        work: !!work.length ? work[0] : {},\r\n        token,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst sendForgotPasswordMailProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {email} = req.body;\r\n\r\n  let today = new Date();\r\n\r\n  const timestamp = today.getTime();\r\n  today = new Date(timestamp + consts.tokenLifetime * 3600 * 1000);\r\n  const expire = today.getTime();\r\n  const token = myCrypto.hmacHex(`${email}${timestamp}`);\r\n  const used = myCrypto.hmacHex(`${timestamp}${token}${expire}`);\r\n\r\n  let sql = sprintf(\"SELECT * FROM `%s` WHERE `email` = ?;\", dbTblName.users);\r\n\r\n  try {\r\n    let rows = await db.query(sql, [email]);\r\n    if (!rows.length) {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.emailIsNotRegistered,\r\n      });\r\n      return;\r\n    }\r\n    const user = rows[0];\r\n    const name = `${user.firstName} ${user.lastName}`;\r\n    const url = `${config.server.baseUrl}${resetPasswordUri}/${email}/${token}`;\r\n    tracer.info(token);\r\n    await mailer.sendForgotPasswordMail({email, name, url, subject: langs.forgotPassword});\r\n\r\n    sql = sprintf(\"INSERT INTO `%s` VALUES ? ON DUPLICATE KEY UPDATE `timestamp` = VALUES(`timestamp`), `token` = VALUES(`token`), `expire` = VALUES(`expire`), `used` = VALUES(`used`);\", dbTblName.resetPasswordTokens);\r\n\r\n    const newRows = [\r\n      [email, timestamp, token, expire, used],\r\n    ];\r\n\r\n    await db.query(sql, [newRows]);\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.resetEmailIsSent,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst validateTokenProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  try {\r\n    const result = await _validateToken(req, res, next);\r\n    switch (result) {\r\n      case tokenStatus.VALID:\r\n        res.status(200).send({\r\n          result: langs.success,\r\n          message: langs.tokenIsValid,\r\n        });\r\n        break;\r\n      case tokenStatus.EXPIRED:\r\n        res.status(200).send({\r\n          result: langs.error,\r\n          message: langs.tokenIsExpired,\r\n        });\r\n        break;\r\n      case tokenStatus.NOT_FOUND:\r\n        res.status(200).send({\r\n          result: langs.error,\r\n          message: langs.tokenIsNotFound,\r\n        });\r\n        break;\r\n      case tokenStatus.ALREADY_USED:\r\n        res.status(200).send({\r\n          result: langs.error,\r\n          message: langs.tokenIsAlreadyUsed,\r\n        });\r\n        break;\r\n    }\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst resetPasswordProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {email, password} = req.body;\r\n\r\n  try {\r\n    const result = await _validateToken(req, res, next);\r\n    switch (result) {\r\n      case tokenStatus.EXPIRED:\r\n        res.status(200).send({\r\n          result: langs.error,\r\n          message: langs.tokenIsExpired,\r\n        });\r\n        return;\r\n      case tokenStatus.NOT_FOUND:\r\n        res.status(200).send({\r\n          result: langs.error,\r\n          message: langs.tokenIsNotFound,\r\n        });\r\n        return;\r\n      case tokenStatus.ALREADY_USED:\r\n        res.status(200).send({\r\n          result: langs.error,\r\n          message: langs.tokenIsAlreadyUsed,\r\n        });\r\n        return;\r\n    }\r\n\r\n    const hash = myCrypto.hmacHex(password);\r\n    tracer.info(password, hash);\r\n    let sql = sprintf(\"UPDATE `%s` SET `used` = ? WHERE `email` = ?;\", dbTblName.resetPasswordTokens);\r\n    await db.query(sql, [1, email]);\r\n    sql = sprintf(\"UPDATE `%s` SET `hash` = ? WHERE `email` = ?;\", dbTblName.users);\r\n    await db.query(sql, [hash, email]);\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullyChanged,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/sign-in\", signInProc);\r\nrouter.post(\"/send-forgot-password-mail\", sendForgotPasswordMailProc);\r\nrouter.post(\"/validate-token\", validateTokenProc);\r\nrouter.post(\"/reset-password\", resetPasswordProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport {dbTblName} from \"core/config\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport helpers from \"core/helpers\";\r\nimport db from \"core/db\";\r\nimport {sprintf} from \"sprintf-js\";\r\n\r\nconst getJobRolesProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n\r\n  let conditions = {\r\n    deletedDate: {\r\n      type: \"=\",\r\n      value: \"\",\r\n    },\r\n  };\r\n  try {\r\n    const data = await helpers.listQuery({table: dbTblName.core.jobRoles, pageSize: 500});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst getJobSubrolesProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {jobRoleId} = req.body;\r\n\r\n  try {\r\n    let conditions = {\r\n      jobRoleId: {\r\n        type: \"=\",\r\n        value: jobRoleId,\r\n      },\r\n    };\r\n    const data = await helpers.listQuery({table: dbTblName.core.jobSubroles, conditions, pageSize: 500});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst getSectorsProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n\r\n  let conditions = {\r\n    deletedDate: {\r\n      type: \"=\",\r\n      value: \"\",\r\n    },\r\n  };\r\n  try {\r\n    const data = await helpers.listQuery({table: dbTblName.core.sectors, pageSize: 500});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst getIndustriesProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {sectorId} = req.body;\r\n\r\n  try {\r\n    let conditions = {\r\n    };\r\n    if (!!sectorId) {\r\n      conditions[\"sectorId\"] = {\r\n        type: \"=\",\r\n          value: sectorId,\r\n      };\r\n    }\r\n    const data = await helpers.listQuery({table: dbTblName.core.industries, conditions, pageSize: 500});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst getCountriesProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n\r\n  let conditions = {\r\n    deletedDate: {\r\n      type: \"=\",\r\n      value: \"\",\r\n    },\r\n  };\r\n  try {\r\n    const data = await helpers.listQuery({table: dbTblName.core.countries, pageSize: 500});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst getCitiesProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {countryId} = req.body;\r\n\r\n  try {\r\n    let conditions = {\r\n\r\n    };\r\n    if (!!countryId) {\r\n      conditions[\"countryId\"] = {\r\n        type: \"=\",\r\n          value: countryId,\r\n      };\r\n    }\r\n    const data = await helpers.listQuery({table: dbTblName.core.cities, conditions, pageSize: 500});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst getEmploymentTypesProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n\r\n  let conditions = {\r\n    deletedDate: {\r\n      type: \"=\",\r\n      value: \"\",\r\n    },\r\n  };\r\n  try {\r\n    const data = await helpers.listQuery({table: dbTblName.core.employmentTypes, pageSize: 500});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst getSalaryRangesProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n\r\n  let conditions = {\r\n    deletedDate: {\r\n      type: \"=\",\r\n      value: \"\",\r\n    },\r\n  };\r\n  let orders = {\r\n    minSalary: \"ASC\",\r\n  };\r\n  try {\r\n    const data = await helpers.listQuery({table: dbTblName.core.salaryRanges, orders, pageSize: 500});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst getCareerLevelsProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n\r\n  let conditions = {\r\n    deletedDate: {\r\n      type: \"=\",\r\n      value: \"\",\r\n    },\r\n  };\r\n  let orders = {\r\n    level: \"ASC\",\r\n  };\r\n  try {\r\n    const data = await helpers.listQuery({table: dbTblName.core.careerLevels, orders, pageSize: 500});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst getMajorsProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n\r\n  let conditions = {\r\n    deletedDate: {\r\n      type: \"=\",\r\n      value: \"\",\r\n    },\r\n  };\r\n  let orders = {\r\n    min: \"ASC\",\r\n  };\r\n  try {\r\n    const data = await helpers.listQuery({table: dbTblName.core.majors, pageSize: 500});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst getDegreesProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n\r\n  let conditions = {\r\n    deletedDate: {\r\n      type: \"=\",\r\n      value: \"\",\r\n    },\r\n  };\r\n  let orders = {\r\n    level: \"ASC\",\r\n  };\r\n  try {\r\n    const data = await helpers.listQuery({table: dbTblName.core.degrees, orders, pageSize: 500});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst getVisaStatusesProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n\r\n  let conditions = {\r\n    deletedDate: {\r\n      type: \"=\",\r\n      value: \"\",\r\n    },\r\n  };\r\n  try {\r\n    const data = await helpers.listQuery({table: dbTblName.core.visaStatuses, pageSize: 500});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst getGradesProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n\r\n  let conditions = {\r\n    deletedDate: {\r\n      type: \"=\",\r\n      value: \"\",\r\n    },\r\n  };\r\n  try {\r\n    const data = await helpers.listQuery({table: dbTblName.core.grades, pageSize: 500});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/get-job-roles\", getJobRolesProc);\r\nrouter.post(\"/get-job-subroles\", getJobSubrolesProc);\r\nrouter.post(\"/get-sectors\", getSectorsProc);\r\nrouter.post(\"/get-industries\", getIndustriesProc);\r\nrouter.post(\"/get-countries\", getCountriesProc);\r\nrouter.post(\"/get-cities\", getCitiesProc);\r\nrouter.post(\"/get-employment-types\", getEmploymentTypesProc);\r\nrouter.post(\"/get-salary-ranges\", getSalaryRangesProc);\r\nrouter.post(\"/get-career-levels\", getCareerLevelsProc);\r\nrouter.post(\"/get-majors\", getMajorsProc);\r\nrouter.post(\"/get-degrees\", getDegreesProc);\r\nrouter.post(\"/get-grades\", getGradesProc);\r\nrouter.post(\"/get-visa-statuses\", getVisaStatusesProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\n\r\nimport authRouter from \"./hire/auth\";\r\nimport accountRouter from \"./hire/account\";\r\nimport workplaceRouter from \"./hire/workplace\";\r\nimport myJobsRouter from \"./hire/my-jobs\";\r\n\r\nconst router = express.Router();\r\n\r\nrouter.use(\"/auth\", authRouter);\r\nrouter.use(\"/account\", accountRouter);\r\nrouter.use(\"/workplace\", workplaceRouter);\r\nrouter.use(\"/my-jobs\", myJobsRouter);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport {dbTblName} from \"core/config\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport db from \"core/db\";\r\nimport {sprintf} from \"sprintf-js\";\r\nimport helpers from \"core/helpers\";\r\n\r\nconst saveProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id, name, size, sectorId, industryId, type, hideLocation, countryId, website, taxRegNumber} = req.body;\r\n\r\n  const newRow = [name, size, sectorId, industryId, type, hideLocation, countryId, website, taxRegNumber];\r\n  let sql = sprintf(\"UPDATE `%s` SET `name` = ?, `size` = ?, `sectorId` = ?, `industryId` = ?, `type` = ?, `hideLocation` = ?, `countryId` = ?, `website` = ?, `taxRegNumber` = ? WHERE `id` = ?;\", dbTblName.hire.accounts);\r\n  try {\r\n    let rows = await db.query(sql, [...newRow, id]);\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullySaved,\r\n      data:  {\r\n        hire: {id, name, size, sectorId, industryId, type, hideLocation, countryId, website, taxRegNumber}\r\n      },\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/save\", saveProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport {sprintf} from \"sprintf-js\";\r\nimport dateformat from \"dateformat\";\r\n\r\nimport {dbTblName, session} from \"core/config\";\r\nimport db from \"core/db\";\r\nimport myCrypto from \"core/myCrypto\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts, {accountTypes} from \"core/consts\";\r\nimport helpers from \"core/helpers\";\r\n\r\nconst signUpProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {name, location, size, type, countryCode, phone, firstName, fatherName, lastName, email, password} = req.body;\r\n  const hash = myCrypto.hmacHex(password || \"\");\r\n  const today = new Date();\r\n  const date = dateformat(today, \"yyyy-mm-dd\");\r\n  const timestamp = today.toISOString();\r\n\r\n  let sql = sprintf(\"SELECT `email` FROM `%s` WHERE `email` = ?;\", dbTblName.core.users);\r\n  let rows;\r\n  try {\r\n    rows = await db.query(sql, [email]);\r\n    if (rows.length > 0) {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.emailAlreadyRegistered,\r\n      });\r\n      return;\r\n    }\r\n    let newRows = [\r\n      [null, name, 0, location, size, 0, 0, type, \"\", \"\", date, date, \"\"],\r\n    ];\r\n    sql = sprintf(\"INSERT INTO `%s` VALUES ?;\", dbTblName.hire.accounts);\r\n    rows = await db.query(sql, [newRows]);\r\n\r\n    newRows = [\r\n      [null, 0, \"\", rows.insertId, \"ADMIN\", email, \"\", hash, firstName, fatherName, lastName, countryCode, phone, \"\", location, location, 0, \"\", \"U\", date, date, \"\", 0, 0, \"\"],\r\n    ];\r\n    sql = sprintf(\"INSERT INTO `%s` VALUES ?;\", dbTblName.core.users);\r\n    await db.query(sql, [newRows]);\r\n\r\n    // sendVerificationEmail(email);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullyRegistered,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/sign-up\", signUpProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\n\r\nimport postAJobRouter from \"./my-jobs/post-a-job\";\r\nimport myJobsRouter from \"./my-jobs/my-jobs\";\r\n\r\nconst router = express.Router();\r\n\r\nrouter.use(\"/post-a-job\", postAJobRouter);\r\nrouter.use(\"/my-jobs\", myJobsRouter);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport {dbTblName} from \"core/config\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport helpers from \"core/helpers\";\r\nimport db from \"core/db\";\r\nimport {sprintf} from \"sprintf-js\";\r\n\r\nconst _listItems = async (req) => {\r\n  const {hireId, keyword, type, page, pageSize} = req.body;\r\n\r\n  try {\r\n    let conditions = {\r\n      hireId: {\r\n        type: \"=\",\r\n        value: hireId,\r\n      },\r\n      deletedDate: {\r\n        type: \"=\",\r\n        value: \"\",\r\n      },\r\n    };\r\n    if (!!keyword) {\r\n      conditions[\"title\"] = {\r\n        type: \"LIKE\",\r\n        value: `%${keyword}%`,\r\n      }\r\n    }\r\n    if (!!type) {\r\n      conditions[\"isActive\"] = {\r\n        type: \"=\",\r\n        value: type,\r\n      }\r\n    }\r\n    const data = await helpers.listQuery({table: dbTblName.hire.jobs.main, conditions, page: page || 1, pageSize});\r\n\r\n    return data;\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n};\r\n\r\nconst _listItemsProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n\r\n  try {\r\n    const data = await _listItems(req);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst listProc = async (req, res, next) => {\r\n  await _listItemsProc(req, res, next);\r\n};\r\n\r\nconst getProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id} = req.body;\r\n\r\n  try {\r\n    let conditions = {\r\n      id: {\r\n        type: \"=\",\r\n        value: id,\r\n      },\r\n      deletedDate: {\r\n        type: \"=\",\r\n        value: \"\",\r\n      },\r\n    };\r\n    const jobInformation = await helpers.getQuery({table: dbTblName.hire.jobs.main, conditions});\r\n    const candidateRequirements = await helpers.getQuery({table: dbTblName.hire.jobs.candidateRequirements, conditions});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data: {\r\n        jobInformation,\r\n        candidateRequirements,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst activateProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id, isActive} = req.body;\r\n\r\n  let updates = {\r\n    isActive,\r\n  };\r\n\r\n  let conditions = {\r\n    id: {\r\n      type: \"=\",\r\n      value: id,\r\n    }\r\n  };\r\n\r\n  try {\r\n    await helpers.updateQuery({table: dbTblName.hire.jobs.main, updates, conditions});\r\n\r\n    const data = await _listItems(req);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs[!!isActive ? \"successfullyActivated\" : \"successfullyDeactivated\"],\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst deleteProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id} = req.body;\r\n\r\n  let conditions = {\r\n    id: {\r\n      type: \"=\",\r\n      value: id,\r\n    }\r\n  };\r\n\r\n  try {\r\n    await helpers.deleteQuery({table: dbTblName.hire.jobs.main, conditions});\r\n\r\n    await _listItemsProc(req, res, next);\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/list\", listProc);\r\nrouter.post(\"/get\", getProc);\r\nrouter.post(\"/activate\", activateProc);\r\nrouter.post(\"/delete\", deleteProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport {dbTblName} from \"core/config\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport helpers from \"core/helpers\";\r\nimport db from \"core/db\";\r\nimport {sprintf} from \"sprintf-js\";\r\n\r\nconst postJobProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {hireId, jobInformation, candidateRequirements} = req.body;\r\n\r\n  const today = new Date();\r\n\r\n  try{\r\n    let data = jobInformation || {};\r\n    let newRows = [\r\n      [data.id, hireId, data.candidateType, data.title, data.jobRoleId, data.jobSubroleId, data.sectorId, data.industryId, data.countryId, data.cityId, data.employmentTypeId, data.salaryRangeId, data.vacanciesCount, data.description, data.skills, data.specialties, data.questionnaireId, data.isActive, today, today, \"\"],\r\n    ];\r\n    let sql = sprintf(\"INSERT INTO `%s` VALUES ? ON DUPLICATE KEY UPDATE `candidateType` = VALUES(`candidateType`), `title` = VALUES(`title`), `jobRoleId` = VALUES(`jobRoleId`), `jobSubroleId` = VALUES(`jobSubroleId`), `sectorId` = VALUES(`sectorId`), `industryId` = VALUES(`industryId`), `countryId` = VALUES(`countryId`), `cityId` = VALUES(`cityId`), `employmentTypeId` = VALUES(`employmentTypeId`), `salaryRangeId` = VALUES(`salaryRangeId`), `vacanciesCount` = VALUES(`vacanciesCount`), `description` = VALUES(`description`), `skills` = VALUES(`skills`), `specialties` = VALUES(`specialties`), `questionnaireId` = VALUES(`questionnaireId`), `isActive` = VALUES(`isActive`), `updatedDate` = VALUES(`updatedDate`);\", dbTblName.hire.jobs.main);\r\n\r\n    let rows = await db.query(sql, [newRows]);\r\n\r\n    data = candidateRequirements || {};\r\n    newRows = [\r\n      [rows.insertId, data.careerLevel, data.xpYear1, data.xpYear2, data.majorId, data.degree, data.countryId, data.cityId, data.nationalityId, data.gender, data.age1, data.age2, \"\"],\r\n    ];\r\n    sql = sprintf(\"INSERT INTO `%s` VALUES ? ON DUPLICATE KEY UPDATE `careerLevel` = VALUES(`careerLevel`), `xpYear1` = VALUES(`xpYear1`), `xpYear2` = VALUES(`xpYear2`), `majorId` = VALUES(`majorId`), `degree` = VALUES(`degree`), `countryId` = VALUES(`countryId`), `cityId` = VALUES(`cityId`), `nationalityId` = VALUES(`nationalityId`), `gender` = VALUES(`gender`), `age1` = VALUES(`age1`), `age2` = VALUES(`age2`);\", dbTblName.hire.jobs.candidateRequirements);\r\n    await db.query(sql, [newRows]);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/post-job\", postJobProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\n\r\nimport questionnaireRouter from \"./workplace/questionnaire\";\r\nimport lettersRouter from \"./workplace/letters\";\r\nimport myCompanyProfilesRouter from \"./workplace/my-company-profiles\";\r\nimport employerTestRouter from \"./workplace/employer-test\";\r\n\r\nconst router = express.Router();\r\n\r\nrouter.use(\"/questionnaire\", questionnaireRouter);\r\nrouter.use(\"/letters\", lettersRouter);\r\nrouter.use(\"/my-company-profiles\", myCompanyProfilesRouter);\r\nrouter.use(\"/employer-test\", employerTestRouter);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport {dbTblName} from \"core/config\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport helpers from \"core/helpers\";\r\nimport db from \"core/db\";\r\nimport {sprintf} from \"sprintf-js\";\r\n\r\nconst _loadDepartments = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  // const {} = req.body;\r\n\r\n  try {\r\n    const data = await helpers.listQuery({table: dbTblName.hireEmployerTestDepartments});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst _loadCategories = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {departmentId} = req.body;\r\n\r\n  try {\r\n    let conditions = {\r\n      departmentId: {\r\n        type: \"=\",\r\n        value: departmentId,\r\n      },\r\n    };\r\n    const data = await helpers.listQuery({table: dbTblName.hireEmployerTestCategories, conditions});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst departmentsProc = async (req, res, next) => {\r\n  await _loadDepartments(req, res, next);\r\n};\r\n\r\nconst categoriesProc = async (req, res, next) => {\r\n  await _loadCategories(req, res, next);\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/departments\", departmentsProc);\r\nrouter.post(\"/categories\", categoriesProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport {dbTblName} from \"core/config\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport helpers from \"core/helpers\";\r\nimport db from \"core/db\";\r\nimport {sprintf} from \"sprintf-js\";\r\n\r\nconst _listItems = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {userId, type, keyword, page, pageSize} = req.body;\r\n\r\n  try {\r\n    let conditions = {\r\n      userId: {\r\n        type: \"=\",\r\n        value: userId,\r\n      },\r\n      name: {\r\n        type: \"LIKE\",\r\n        value: `%${keyword}%`,\r\n      },\r\n      deletedDate: {\r\n        type: \"=\",\r\n        value: \"\",\r\n      },\r\n    };\r\n    if (!!type) {\r\n      conditions[\"type\"] = {\r\n        type: \"=\",\r\n        value: type,\r\n      }\r\n    }\r\n    const data = await helpers.listQuery({table: dbTblName.hire.letters, conditions, page: page || 1, pageSize});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst listProc = async (req, res, next) => {\r\n  await _listItems(req, res, next);\r\n};\r\n\r\nconst saveProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id, userId, type, name, subject, message, file} = req.body;\r\n\r\n  const appDir = process.cwd();\r\n  const fileDir = path.join(appDir, \"public\", consts.uploadPath.hire.workplace.letters);\r\n  let fileName = \"\";\r\n\r\n  if (!!file) {\r\n    fileName = await helpers.uploadFile(file, fileDir);\r\n  }\r\n  let attachment = sprintf(\"%s/%s\", consts.uploadPath.hire.workplace.letters, fileName);\r\n\r\n  let sql;\r\n  let rows;\r\n  let row;\r\n  if (!!id) {\r\n    sql = sprintf(\"SELECT * FROM `%s` WHERE `id` = ?;\", dbTblName.hire.letters);\r\n    rows = await db.query(sql, [id]);\r\n    if (rows.length > 0) {\r\n      row = rows[0];\r\n      let oldFilename = path.join(fileDir, path.basename(row[\"attachment\"]));\r\n      !!file && fs.unlink(oldFilename, e => {\r\n\r\n      });\r\n    }\r\n  }\r\n\r\n  if (!fileName.length) {\r\n    attachment = !!row ? row.attachment : \"\";\r\n  }\r\n  const attached = !!attachment.length;\r\n\r\n  const newRows = [\r\n    [id, userId, type, name, subject, message, attached, attachment, \"\", \"\"],\r\n  ];\r\n  sql = sprintf(\"INSERT INTO `%s` VALUES ? ON DUPLICATE KEY UPDATE `type` = VALUES(`type`), `name` = VALUES(`name`), `subject` = VALUES(`subject`), `message` = VALUES(`message`), `attached` = VALUES(`attached`), `attachment` = VALUES(`attachment`), `attachmentName` = VALUES(`attachmentName`);\", dbTblName.hire.letters);\r\n  try {\r\n    rows = await db.query(sql, [newRows]);\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullySaved,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst getProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id} = req.body;\r\n\r\n  let conditions = {\r\n    id: {\r\n      type: \"=\",\r\n      value: id,\r\n    }\r\n  };\r\n\r\n  try {\r\n    const data = await helpers.getQuery({table: dbTblName.hire.letters, conditions});\r\n    if (!!data) {\r\n      res.status(200).send({\r\n        result: langs.success,\r\n        data,\r\n      });\r\n    } else {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.notFound,\r\n      });\r\n    }\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst deleteProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id} = req.body;\r\n\r\n  let conditions = {\r\n    id: {\r\n      type: \"=\",\r\n      value: id,\r\n    }\r\n  };\r\n\r\n  try {\r\n    await helpers.deleteQuery({table: dbTblName.hire.letters, conditions});\r\n\r\n    await _listItems(req, res, next);\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst uploadAttachmentProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id} = req.body;\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/list\", listProc);\r\nrouter.post(\"/save\", saveProc);\r\nrouter.post(\"/get\", getProc);\r\nrouter.post(\"/delete\", deleteProc);\r\n// router.post(\"/upload-attachment\", deleteProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport {dbTblName} from \"core/config\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport helpers from \"core/helpers\";\r\nimport db from \"core/db\";\r\nimport {sprintf} from \"sprintf-js\";\r\n\r\nconst loadSalaryProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id} = req.body;\r\n\r\n  let conditions = {\r\n    id: {\r\n      type: \"=\",\r\n      value: id,\r\n    }\r\n  };\r\n\r\n  try {\r\n    let data = await helpers.getQuery({table: dbTblName.hire.my_company_profiles, conditions});\r\n    if (!!data) {\r\n      res.status(200).send({\r\n        result: langs.success,\r\n        data: {\r\n          unit: data.salaryUnit,\r\n          min: data.salaryMin,\r\n          max: data.salaryMax,\r\n        },\r\n      });\r\n    } else {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.notFound,\r\n      });\r\n    }\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst saveSalaryProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id, unit, min, max} = req.body;\r\n\r\n  const newRows = [\r\n    [id, unit, min, max, \"\", \"\", \"\", \"\"],\r\n  ];\r\n  let sql = sprintf(\"INSERT INTO `%s` VALUES ? ON DUPLICATE KEY UPDATE `salaryUnit` = VALUES(`salaryUnit`), `salaryMin` = VALUES(`salaryMin`), `salaryMax` = VALUES(`salaryMax`);\", dbTblName.hire.my_company_profiles);\r\n  try {\r\n    let rows = await db.query(sql, [newRows]);\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullySaved,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst loadAboutProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id} = req.body;\r\n\r\n  let conditions = {\r\n    id: {\r\n      type: \"=\",\r\n      value: id,\r\n    }\r\n  };\r\n\r\n  try {\r\n    let data = await helpers.getQuery({table: dbTblName.hire.my_company_profiles, conditions});\r\n    if (!!data) {\r\n      res.status(200).send({\r\n        result: langs.success,\r\n        data: {\r\n          value: data.about,\r\n        },\r\n      });\r\n    } else {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.notFound,\r\n      });\r\n    }\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst saveAboutProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id, value} = req.body;\r\n\r\n  const newRows = [\r\n    [id, \"\", 0, 0, value, \"\", \"\", \"\"],\r\n  ];\r\n  let sql = sprintf(\"INSERT INTO `%s` VALUES ? ON DUPLICATE KEY UPDATE `about` = VALUES(`about`);\", dbTblName.hire.my_company_profiles);\r\n  try {\r\n    let rows = await db.query(sql, [newRows]);\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullySaved,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst loadVisionProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id} = req.body;\r\n\r\n  let conditions = {\r\n    id: {\r\n      type: \"=\",\r\n      value: id,\r\n    }\r\n  };\r\n\r\n  try {\r\n    let data = await helpers.getQuery({table: dbTblName.hire.my_company_profiles, conditions});\r\n    if (!!data) {\r\n      res.status(200).send({\r\n        result: langs.success,\r\n        data: {\r\n          value: data.vision,\r\n        },\r\n      });\r\n    } else {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.notFound,\r\n      });\r\n    }\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst saveVisionProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id, value} = req.body;\r\n\r\n  const newRows = [\r\n    [id, \"\", 0, 0, \"\", value, \"\", \"\"],\r\n  ];\r\n  let sql = sprintf(\"INSERT INTO `%s` VALUES ? ON DUPLICATE KEY UPDATE `vision` = VALUES(`vision`);\", dbTblName.hire.my_company_profiles);\r\n  try {\r\n    let rows = await db.query(sql, [newRows]);\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullySaved,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst loadMissionProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id} = req.body;\r\n\r\n  let conditions = {\r\n    id: {\r\n      type: \"=\",\r\n      value: id,\r\n    }\r\n  };\r\n\r\n  try {\r\n    let data = await helpers.getQuery({table: dbTblName.hire.my_company_profiles, conditions});\r\n    if (!!data) {\r\n      res.status(200).send({\r\n        result: langs.success,\r\n        data: {\r\n          value: data.mission,\r\n        },\r\n      });\r\n    } else {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.notFound,\r\n      });\r\n    }\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst saveMissionProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id, value} = req.body;\r\n\r\n  const newRows = [\r\n    [id, \"\", 0, 0, \"\", \"\", value, \"\"],\r\n  ];\r\n  let sql = sprintf(\"INSERT INTO `%s` VALUES ? ON DUPLICATE KEY UPDATE `mission` = VALUES(`mission`);\", dbTblName.hire.my_company_profiles);\r\n  try {\r\n    let rows = await db.query(sql, [newRows]);\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullySaved,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst loadCoverPhotoProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id} = req.body;\r\n\r\n  let conditions = {\r\n    id: {\r\n      type: \"=\",\r\n      value: id,\r\n    }\r\n  };\r\n\r\n  try {\r\n    let data = await helpers.getQuery({table: dbTblName.hire.my_company_profiles, conditions});\r\n    if (!!data) {\r\n      res.status(200).send({\r\n        result: langs.success,\r\n        data,\r\n      });\r\n    } else {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.notFound,\r\n      });\r\n    }\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst saveCoverPhotoProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id, file} = req.body;\r\n\r\n  const appDir = process.cwd();\r\n  const fileDir = path.join(appDir, \"public\", consts.uploadPath.hire.workplace.myCompanyProfiles);\r\n  let fileName = \"\";\r\n\r\n  if (!!file) {\r\n    fileName = await helpers.uploadFile(file, fileDir);\r\n  }\r\n  let coverPhoto = sprintf(\"%s/%s\", consts.uploadPath.hire.workplace.myCompanyProfiles, fileName);\r\n\r\n  let rows, row;\r\n  let sql\r\n  if (!!id) {\r\n    sql = sprintf(\"SELECT * FROM `%s` WHERE `id` = ?;\", dbTblName.hire.my_company_profiles);\r\n    rows = await db.query(sql, [id]);\r\n    if (rows.length > 0) {\r\n      row = rows[0];\r\n      let oldFilename = path.join(fileDir, path.basename(row[\"coverPhoto\"]));\r\n      !!file && fs.unlink(oldFilename, e => {\r\n\r\n      });\r\n    }\r\n  }\r\n\r\n  const newRows = [\r\n    [id, \"\", 0, 0, \"\", \"\", \"\", !!file ? coverPhoto : \"\"],\r\n  ];\r\n  sql = sprintf(\"INSERT INTO `%s` VALUES ? ON DUPLICATE KEY UPDATE `coverPhoto` = VALUES(`coverPhoto`);\", dbTblName.hire.my_company_profiles);\r\n  try {\r\n    let rows = await db.query(sql, [newRows]);\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullySaved,\r\n      data: {rows, coverPhoto},\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/load-salary\", loadSalaryProc);\r\nrouter.post(\"/save-salary\", saveSalaryProc);\r\nrouter.post(\"/load-about\", loadAboutProc);\r\nrouter.post(\"/save-about\", saveAboutProc);\r\nrouter.post(\"/load-vision\", loadVisionProc);\r\nrouter.post(\"/save-vision\", saveVisionProc);\r\nrouter.post(\"/load-mission\", loadMissionProc);\r\nrouter.post(\"/save-mission\", saveMissionProc);\r\nrouter.post(\"/load-cover-photo\", loadCoverPhotoProc);\r\nrouter.post(\"/save-cover-photo\", saveCoverPhotoProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport {dbTblName} from \"core/config\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport helpers from \"core/helpers\";\r\nimport db from \"core/db\";\r\nimport {sprintf} from \"sprintf-js\";\r\n\r\nconst _listQuestionnaires = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {userId, keyword, page, pageSize} = req.body;\r\n\r\n  try {\r\n    let conditions = {\r\n      userId: {\r\n        type: \"=\",\r\n        value: userId,\r\n      },\r\n      deletedDate: {\r\n        type: \"=\",\r\n        value: \"\",\r\n      },\r\n    };\r\n\r\n    if (!!keyword) {\r\n      conditions[\"name\"] = {\r\n        type: \"LIKE\",\r\n          value: `%${keyword}%`,\r\n      };\r\n    }\r\n\r\n    const data = await helpers.listQuery({table: dbTblName.hire.questionnaire.main, conditions, page: page || 1, pageSize});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst _listQuestions = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {questionnaireId, page, pageSize} = req.body;\r\n\r\n  try {\r\n    let conditions = {\r\n      questionnaireId: {\r\n        type: \"=\",\r\n        value: questionnaireId,\r\n      },\r\n      deletedDate: {\r\n        type: \"=\",\r\n        value: \"\",\r\n      },\r\n    };\r\n    const data = await helpers.listQuery({table: dbTblName.hire.questionnaire.questions, conditions, page: page || 1, pageSize});\r\n\r\n    let index = 0;\r\n    for (let row of data.data) {\r\n      row[\"number\"] = ++index;\r\n    }\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst listProc = async (req, res, next) => {\r\n  await _listQuestionnaires(req, res, next);\r\n};\r\n\r\nconst saveProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {questionnaire: {id, userId, name, description, filterByScore, minScore}, questions} = req.body;\r\n\r\n  let newRows = [\r\n    [id, userId, name, description, filterByScore, minScore, \"\"],\r\n  ];\r\n\r\n  try {\r\n    let sql = sprintf(\"INSERT INTO `%s` VALUES ? ON DUPLICATE KEY UPDATE `name` = VALUES(`name`), `description` = VALUES(`description`), `filterByScore` = VALUES(`filterByScore`), `minScore` = VALUES(`minScore`);\", dbTblName.hire.questionnaire.main);\r\n    let rows = await db.query(sql, [newRows]);\r\n\r\n    const questionnaireId = id || rows.insertId;\r\n    newRows = [];\r\n    // let preIds = [];\r\n    for (let row of questions) {\r\n      // !!row.id && preIds.push(row.id);\r\n      newRows.push([row.id, questionnaireId, row.question, row.type, row.required, row.answers, row.hasCorrectAnswer, row.correctAnswer, \"\"]);\r\n      row[\"questionnaireId\"] = questionnaireId;\r\n    }\r\n    // sql = sprintf(\"DELETE FROM `%s` WHERE `questionnaireId` = ? AND `id` NOT IN ?;\", dbTblName.hire.questionnaire.questions);\r\n    // await db.query(sql, [questionnaireId, preIds.join(\",\")]);\r\n    sql = sprintf(\"DELETE FROM `%s` WHERE `questionnaireId` = ?;\", dbTblName.hire.questionnaire.questions);\r\n    await db.query(sql, [questionnaireId]);\r\n    sql = sprintf(\"INSERT INTO `%s` VALUES ? ON DUPLICATE KEY UPDATE `question` = VALUES(`question`), `type` = VALUES(`type`), `required` = VALUES(`required`), `answers` = VALUES(`answers`), `hasCorrectAnswer` = VALUES(`hasCorrectAnswer`), `correctAnswer` = VALUES(`correctAnswer`);\", dbTblName.hire.questionnaire.questions);\r\n    rows = await db.query(sql, [newRows]);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullySaved,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst getProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id} = req.body;\r\n\r\n  let conditions = {\r\n    id: {\r\n      type: \"=\",\r\n      value: id,\r\n    }\r\n  };\r\n\r\n  try {\r\n    const data = await helpers.getQuery({table: dbTblName.hire.questionnaire.main, conditions});\r\n    if (!!data) {\r\n      res.status(200).send({\r\n        result: langs.success,\r\n        data,\r\n      });\r\n    } else {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.notFound,\r\n      });\r\n    }\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst deleteProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id} = req.body;\r\n\r\n  let conditions = {\r\n    id: {\r\n      type: \"=\",\r\n      value: id,\r\n    }\r\n  };\r\n\r\n  try {\r\n    await helpers.deleteQuery({table: dbTblName.hire.questionnaire.main, conditions});\r\n\r\n    await _listQuestionnaires(req, res, next);\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst listQuestionsProc = async (req, res, next) => {\r\n  await _listQuestions(req, res, next);\r\n};\r\n\r\nconst saveQuestionProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id, questionnaireId, question, required} = req.body;\r\n\r\n  const newRows = [\r\n    [id, questionnaireId, question, 0],\r\n  ];\r\n\r\n  try {\r\n    let sql = sprintf(\"INSERT INTO `%s` VALUES ? ON DUPLICATE KEY UPDATE `questionnaireId` = VALUES(`questionnaireId`), `question` = VALUES(`question`);\", dbTblName.hire.questionnaire.questions);\r\n    let rows = await db.query(sql, [newRows]);\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullySaved,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst getQuestionProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id} = req.body;\r\n\r\n  let conditions = {\r\n    id: {\r\n      type: \"=\",\r\n      value: id,\r\n    }\r\n  };\r\n\r\n  try {\r\n    const data = await helpers.getQuery({table: dbTblName.hire.questionnaire.questions, conditions});\r\n    if (!!data) {\r\n      res.status(200).send({\r\n        result: langs.success,\r\n        data,\r\n      });\r\n    } else {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.notFound,\r\n      });\r\n    }\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst deleteQuestionProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id} = req.body;\r\n\r\n  let conditions = {\r\n    id: {\r\n      type: \"=\",\r\n      value: id,\r\n    }\r\n  };\r\n\r\n  try {\r\n    await helpers.deleteQuery({table: dbTblName.hire.questionnaire.questions, conditions});\r\n\r\n    await _listQuestions(req, res, next);\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/list\", listProc);\r\nrouter.post(\"/save\", saveProc);\r\nrouter.post(\"/get\", getProc);\r\nrouter.post(\"/delete\", deleteProc);\r\n\r\nrouter.post(\"/list-questions\", listQuestionsProc);\r\nrouter.post(\"/save-question\", saveQuestionProc);\r\nrouter.post(\"/get-question\", getQuestionProc);\r\nrouter.post(\"/delete-question\", deleteQuestionProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport {sprintf} from \"sprintf-js\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport dateformat from \"dateformat\";\r\nimport path from \"path\";\r\nimport uuid from \"uuid\";\r\nimport fs from \"fs\";\r\nimport mkdirp from \"mkdirp\";\r\nimport {dbTblName, session} from \"core/config\";\r\nimport db from \"core/db\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport myCrypto from \"core/myCrypto\";\r\nimport helpers from \"core/helpers\";\r\n\r\nconst avatarProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {userId} = req.body;\r\n\r\n  let sql = sprintf(\"SELECT * FROM `%s` WHERE `userId` = ?;\", dbTblName.user_avatar);\r\n  try {\r\n    let rows = await db.query(sql, [userId]);\r\n    if (!!rows.length) {\r\n      res.status(200).send({\r\n        result: langs.success,\r\n        data: rows[0][\"avatar\"],\r\n      });\r\n    } else {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.notFound,\r\n      });\r\n    }\r\n  } catch (err) {\r\n    res.status(200).send({\r\n      result: langs.error,\r\n      message: langs.unknownServerError,\r\n    });\r\n  }\r\n};\r\n\r\nconst saveAvatarProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {userId, file} = req.body;\r\n\r\n  const today = new Date();\r\n  const date = dateformat(today, \"yyyy-mm-dd\");\r\n  // const time = dateformat(today, \"hh:MM TT\");\r\n  // const timestamp = today.getTime();\r\n\r\n  const appDir = process.cwd();\r\n  const fileDir = path.join(appDir, \"public\", consts.uploadPath.avatars);\r\n  const fileName = sprintf(\"%s%s\", uuid(), path.extname(file.path));\r\n  const filePath = path.join(fileDir, fileName);\r\n  const writable = fs.createWriteStream(filePath);\r\n  const media = sprintf(\"%s/%s\", consts.uploadPath.avatars, fileName);\r\n  mkdirp(fileDir, () => {\r\n    file.on(\"end\", async e => {\r\n      const newRows = [\r\n        [userId, media, date],\r\n      ];\r\n      let sql;\r\n      let rows;\r\n      if (userId) {\r\n        sql = sprintf(\"SELECT * FROM `%s` WHERE `userId` = ?;\", dbTblName.user_avatar);\r\n        rows = await db.query(sql, [userId]);\r\n        if (rows.length > 0) {\r\n          const oldFilename = path.join(fileDir, path.basename(rows[0][\"avatar\"]));\r\n          tracer.debug(oldFilename);\r\n          fs.unlink(oldFilename, e => {\r\n\r\n          });\r\n        }\r\n      }\r\n      sql = sprintf(\"INSERT INTO `%s` VALUES ? ON DUPLICATE KEY UPDATE `avatar` = VALUES(`avatar`), `updatedDate` = VALUES(`updatedDate`);\", dbTblName.user_avatar);\r\n      try {\r\n        rows = await db.query(sql, [newRows]);\r\n        res.status(200).send({\r\n          result: langs.success,\r\n          message: langs.successfullySaved,\r\n          data: rows,\r\n        });\r\n      } catch (err) {\r\n        helpers.handleErr(res, langs, err);\r\n      }\r\n    });\r\n    file.on(\"error\", err => {\r\n      helpers.handleErr(res, langs, err);\r\n    });\r\n    file.pipe(writable);\r\n  });\r\n};\r\n\r\nconst saveProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  let {id, email, username, firstName, fatherName, lastName, gender, birthday, jobTitle, sector, company, city, countryCode, phone} = req.body;\r\n\r\n  const today = new Date();\r\n  const date = dateformat(today, \"yyyy-mm-dd\");\r\n\r\n  const newRows = [\r\n    [id, email, \"\", username, firstName, fatherName, lastName, gender, birthday, jobTitle, sector, company, city, countryCode, phone, 0, 0, date, date, \"\", \"\"],\r\n  ];\r\n\r\n  let sql = sprintf(\"INSERT INTO `%s` VALUES ? ON DUPLICATE KEY UPDATE `email` = VALUES(`email`), `username` = VALUES(`username`), `firstName` = VALUES(`firstName`), `fatherName` = VALUES(`fatherName`), `lastName` = VALUES(`lastName`), `gender` = VALUES(`gender`), `birthday` = VALUES(`birthday`), `jobTitle` = VALUES(`jobTitle`), `sector` = VALUES(`sector`), `company` = VALUES(`company`), `city` = VALUES(`city`), `countryCode` = VALUES(`countryCode`), `phone` = VALUES(`phone`);\", dbTblName.users);\r\n  try {\r\n    let rows = await db.query(sql, [newRows]);\r\n    const token = jwt.sign(\r\n      {\r\n        id: id,\r\n        email: email,\r\n        firstName: firstName,\r\n        lastName: lastName,\r\n      },\r\n      session.secret\r\n    );\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullySaved,\r\n      data: {\r\n        user: {id, email, username, firstName, fatherName, lastName, gender, birthday, jobTitle, sector, company, city, countryCode, phone},\r\n        token,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst changePasswordProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  let {id, password0, password} = req.body;\r\n\r\n  const hash0 = myCrypto.hmacHex(password0 || \"\");\r\n  const hash = myCrypto.hmacHex(password || \"\");\r\n\r\n  let sql = sprintf(\"SELECT * FROM `%s` WHERE `id` = ? AND `hash` = ?;\", dbTblName.users);\r\n  try {\r\n    let rows = await db.query(sql, [id, hash0]);\r\n    if (rows.length === 0) {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.currentPasswordIncorrect,\r\n      });\r\n      return;\r\n    }\r\n    sql = sprintf(\"UPDATE `%s` SET `hash` = ? WHERE `id` = ?;\", dbTblName.users);\r\n    await db.query(sql, [hash, id]);\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.passwordIsSuccessfullyChanged,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/avatar\", avatarProc);\r\nrouter.post(\"/save-avatar\", saveAvatarProc);\r\nrouter.post(\"/save\", saveProc);\r\nrouter.post(\"/change-password\", changePasswordProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\n\r\nimport authRouter from \"./work/auth\";\r\nimport findJobsRouter from \"./work/find-jobs\";\r\nimport accountRouter from \"./work/account\";\r\n\r\nconst router = express.Router();\r\n\r\nrouter.use(\"/auth\", authRouter);\r\nrouter.use(\"/find-jobs\", findJobsRouter);\r\nrouter.use(\"/account\", accountRouter);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport {dbTblName} from \"core/config\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport db from \"core/db\";\r\nimport {sprintf} from \"sprintf-js\";\r\nimport helpers from \"core/helpers\";\r\n\r\nconst _save = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id, jobRoleId, jobTitle, companyName, startDate, endDate, isPresent, jobLocationId, companySectorId, companyIndustryId, jobVisaStatusId, careerLevel, degree, university, majorId, graduatedDate, gradeId} = req.body;\r\n\r\n  const newRows = [\r\n    [!id ? null : id, jobRoleId, jobTitle, companyName, startDate, endDate, isPresent, jobLocationId, companySectorId, companyIndustryId, jobVisaStatusId, careerLevel, degree, university, majorId, graduatedDate, gradeId, 0, \"\", 1, \"\"]\r\n  ];\r\n  let sql = sprintf(\"INSERT INTO `%s` VALUES ? ON DUPLICATE KEY UPDATE `jobRoleId` = VALUES(`jobRoleId`), `jobTitle` = VALUES(`jobTitle`), `companyName` = VALUES(`companyName`), `startDate` = VALUES(`startDate`), `endDate` = VALUES(`endDate`), `isPresent` = VALUES(`isPresent`), `jobLocationId` = VALUES(`jobLocationId`), `companySectorId` = VALUES(`companySectorId`), `companyIndustryId` = VALUES(`companyIndustryId`), `jobVisaStatusId` = VALUES(`jobVisaStatusId`), `careerLevel` = VALUES(`careerLevel`), `degree` = VALUES(`degree`), `university` = VALUES(`university`), `majorId` = VALUES(`majorId`), `graduatedDate` = VALUES(`graduatedDate`), `gradeId` = VALUES(`gradeId`), `isVisited` = VALUES(`isVisited`);\", dbTblName.work.accounts);\r\n  try {\r\n    let rows = await db.query(sql, [newRows]);\r\n    return {\r\n      rows,\r\n      work: {id, jobRoleId, jobTitle, companyName, startDate, endDate, isPresent, jobLocationId, companySectorId, companyIndustryId, jobVisaStatusId, careerLevel, degree, university, majorId, graduatedDate, gradeId, isVisited: 1},\r\n    };\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n};\r\n\r\nconst saveProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  try {\r\n    const {work} = await _save(req, res, next);\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullySaved,\r\n      data:  {\r\n        work,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst saveMinifiedProfile = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {id, userId, birthday, nationalityId, countryId, cityId, countryCode, phone} = req.body;\r\n\r\n  try {\r\n    const {rows, work} = await _save(req, res, next);\r\n\r\n    const newRow = [!id ? rows.insertId : id, birthday, nationalityId, countryId, cityId, countryCode, phone];\r\n    let sql = sprintf(\"UPDATE `%s` SET `workId` = ?, `birthday` = ?, `nationalityId` = ?, `countryId` = ?, `cityId` = ?, `countryCode` = ?, `phone` = ? WHERE `id` = ?;\", dbTblName.core.users);\r\n    await db.query(sql, [...newRow, userId]);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullySaved,\r\n      data:  {\r\n        user: {birthday, nationalityId, countryId, cityId, countryCode, phone},\r\n        work,\r\n      },\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/save\", saveProc);\r\nrouter.post(\"/save-minified-profile\", saveMinifiedProfile);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport {sprintf} from \"sprintf-js\";\r\nimport dateformat from \"dateformat\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\n\r\nimport {dbTblName} from \"core/config\";\r\nimport db from \"core/db\";\r\nimport myCrypto from \"core/myCrypto\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport helpers from \"core/helpers\";\r\n\r\nconst signUpProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {firstName, fatherName, lastName, email, password, jobRoleId, file} = req.body;\r\n  const hash = myCrypto.hmacHex(password || \"\");\r\n  const today = new Date();\r\n  const date = dateformat(today, \"yyyy-mm-dd\");\r\n  const timestamp = today.toISOString();\r\n\r\n  let sql = sprintf(\"SELECT `email` FROM `%s` WHERE `email` = ?;\", dbTblName.core.users);\r\n  let rows;\r\n  try {\r\n    rows = await db.query(sql, [email]);\r\n    if (rows.length > 0) {\r\n      res.status(200).send({\r\n        result: langs.error,\r\n        message: langs.emailAlreadyRegistered,\r\n      });\r\n      return;\r\n    }\r\n\r\n    let cvPath = \"\";\r\n    if (!!file) {\r\n      const cwd = process.cwd();\r\n      const fileDir = path.join(cwd, \"public\", consts.uploadPath.work.cvs);\r\n      const fileName = await helpers.uploadFile(file, fileDir);\r\n      cvPath = `${consts.uploadPath.work.cvs}/${fileName}`;\r\n    }\r\n\r\n    let newRows = [\r\n      [null, jobRoleId, \"\", \"\", \"\", \"\", 0, 0, 0, 0, 0, 0, 0, 0, \"\", 0, \"\", \"U\", 0, 0, 0, 0, !!file, cvPath, 0, \"\"],\r\n    ];\r\n    sql = sprintf(\"INSERT INTO `%s` VALUES ?;\", dbTblName.work.accounts);\r\n    rows = await db.query(sql, [newRows]);\r\n\r\n    newRows = [\r\n      [null, rows.insertId, \"ADMIN\", 0, \"\", email, \"\", hash, firstName, fatherName, lastName, \"\", \"\", \"\", 0, 0, 0, \"\", \"U\", date, date, \"\", 0, 0, \"\"],\r\n    ];\r\n    sql = sprintf(\"INSERT INTO `%s` VALUES ?;\", dbTblName.core.users);\r\n    await db.query(sql, [newRows]);\r\n\r\n    // sendVerificationEmail(email);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      message: langs.successfullyRegistered,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/sign-up\", signUpProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\n\r\nimport findJobsRouter from \"./find-jobs/find-jobs\";\r\nimport jobsByRoleRouter from \"./find-jobs/jobs-by-role\";\r\nimport jobsByLocationRouter from \"./find-jobs/jobs-by-location\";\r\nimport jobsBySectorRouter from \"./find-jobs/jobs-by-sector\";\r\nimport jobsByCompaniesRouter from \"./find-jobs/jobs-by-companies\";\r\n\r\nconst router = express.Router();\r\n\r\nrouter.use(\"/find-jobs\", findJobsRouter);\r\nrouter.use(\"/jobs-by-role\", jobsByRoleRouter);\r\nrouter.use(\"/jobs-by-location\", jobsByLocationRouter);\r\nrouter.use(\"/jobs-by-sector\", jobsBySectorRouter);\r\nrouter.use(\"/jobs-by-companies\", jobsByCompaniesRouter);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport {dbTblName} from \"core/config\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport helpers from \"core/helpers\";\r\nimport db from \"core/db\";\r\nimport {sprintf} from \"sprintf-js\";\r\nimport moment from \"moment\";\r\n\r\nconst _makeWhereClause = ({countries, cities, jobRoles, specialties, industries, careerLevels, employmentTypes, genders, companyTypes, companyNames, dateModified}) => {\r\n  const whereArr = [];\r\n  if (!!countries && !!countries.length) {\r\n    whereArr.push(sprintf(\"J.countryId IN (%s)\", countries));\r\n  }\r\n  if (!!cities && !!cities.length) {\r\n    whereArr.push(sprintf(\"J.cityId IN (%s)\", cities));\r\n  }\r\n  if (!!jobRoles && !!jobRoles.length) {\r\n    whereArr.push(sprintf(\"J.jobRoleId IN (%s)\", jobRoles));\r\n  }\r\n  if (!!specialties && !!specialties.length) {\r\n    const specialtyArr = specialties.split(\",\");\r\n    const subWhereArr = [];\r\n    for (let item of specialtyArr) {\r\n      subWhereArr.push(sprintf(\"FIND_IN_SET('%s', J.specialties)\", item));\r\n    }\r\n    whereArr.push(sprintf(\"(%s)\", subWhereArr.join(\" OR \")));\r\n  }\r\n  if (!!industries && !!industries.length) {\r\n    whereArr.push(sprintf(\"J.sectorId IN (%s)\", industries));\r\n  }\r\n  if (!!careerLevels && !!careerLevels.length) {\r\n    whereArr.push(sprintf(\"R.careerLevel IN (%s)\", careerLevels));\r\n  }\r\n  if (!!employmentTypes && !!employmentTypes.length) {\r\n    whereArr.push(sprintf(\"J.employmentTypeId IN (%s)\", employmentTypes));\r\n  }\r\n  if (!!genders && !!genders.length) {\r\n    whereArr.push(sprintf(\"FIND_IN_SET(R.gender, '%s')\", genders));\r\n  }\r\n  if (!!companyTypes && !!companyTypes.length) {\r\n    whereArr.push(sprintf(\"FIND_IN_SET(A.type, '%s')\", companyTypes));\r\n  }\r\n  if (!!companyNames && !!companyNames.length) {\r\n    whereArr.push(sprintf(\"FIND_IN_SET(A.name, '%s')\", companyNames ));\r\n  }\r\n  // if (!!dateModified && !!dateModified.length) {\r\n  //   whereArr.push(sprintf(\"J.jobRoleId IN (%s)\", dateModified));\r\n  // }\r\n\r\n  const whereClause = !!whereArr.length ? sprintf(\"WHERE %s\", whereArr.join(\" AND \")) : \"\";\r\n\r\n  return whereClause;\r\n};\r\n\r\nconst _listItems = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {workId, countries, cities, jobRoles, specialties, industries, careerLevels, employmentTypes, genders, companyTypes, companyNames, dateModified, page, pageSize} = req.body;\r\n\r\n  try {\r\n    const whereClause = _makeWhereClause({countries, cities, jobRoles, specialties, industries, careerLevels, employmentTypes, genders, companyTypes, companyNames, dateModified});\r\n    const limit = pageSize || consts.defaultPageSize;\r\n    const start = ((page || 1) - 1) * limit;\r\n    let sql = sprintf(\"SELECT J.*, R.*, JL1.jobRole_en, JL1.jobRole_ar, JL2.jobSubrole_en, JL2.jobSubrole_ar, ET.employmentType_en, ET.employmentType_ar, SL.minSalary, SL.maxSalary, A.name companyName, A.type companyType, L1.country_en, L1.country_ar, L2.city_en, L2.city_ar, CL.careerLevel_en, CL.careerLevel_ar, S.sector_en `companySector_en`, S.sector_ar `companySector_ar`, I.industry_en `companyIndustry_en`, I.industry_ar `companyIndustry_ar`, WC.status `candidateStatus` FROM %s J JOIN %s R ON R.id = J.id JOIN %s JL1 ON JL1.id = J.jobRoleId JOIN %s JL2 ON JL2.id = J.jobSubroleId JOIN %s A ON A.id = J.hireId LEFT JOIN %s ET ON ET.id = J.employmentTypeId LEFT JOIN %s SL ON SL.id = J.salaryRangeId LEFT JOIN %s L1 ON L1.id = J.countryId LEFT JOIN %s L2 ON L2.id = J.cityId LEFT JOIN %s CL ON CL.level = R.careerLevel LEFT JOIN %s S ON S.id = A.sectorId LEFT JOIN %s I ON I.id = A.industryId LEFT JOIN %s WC ON WC.workId = ? %s ORDER BY J.updatedDate DESC LIMIT ?, ?;\", dbTblName.hire.jobs.main, dbTblName.hire.jobs.candidateRequirements, dbTblName.core.jobRoles, dbTblName.core.jobSubroles, dbTblName.hire.accounts, dbTblName.core.employmentTypes, dbTblName.core.salaryRanges, dbTblName.core.countries, dbTblName.core.cities, dbTblName.core.careerLevels, dbTblName.core.sectors, dbTblName.core.industries, dbTblName.work.jobs.candidates, whereClause);\r\n    tracer.info(sql, start, limit);\r\n    const rows = await db.query(sql, [workId, start, limit]);\r\n    let diff;\r\n    let nowEn;\r\n    let nowAr;\r\n    for (let row of rows) {\r\n      nowEn = moment(row[\"createdDate\"]);\r\n      nowAr = moment(row[\"createdDate\"]).locale(\"ar\");\r\n      diff = moment().diff(row[\"createdDate\"], \"day\", true);\r\n      row[\"createdDate_en\"] = diff < 7 ? nowEn.fromNow() : nowEn.format(\"DD/MM/YYYY\");\r\n      row[\"createdDate_ar\"] = diff < 7 ? nowAr.fromNow() : nowAr.format(\"DD/MM/YYYY\");\r\n    }\r\n\r\n    sql = sprintf(\"SELECT COUNT(*) `count` FROM %s J JOIN %s R ON R.id = J.id JOIN %s A ON A.id = J.hireId %s;\", dbTblName.hire.jobs.main, dbTblName.hire.jobs.candidateRequirements, dbTblName.hire.accounts, whereClause);\r\n    const count = await db.query(sql);\r\n    let pageCount = 0;\r\n    count.length > 0 && (pageCount = Math.ceil(count[0][\"count\"] / limit));\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data: rows,\r\n      count: count[0][\"count\"],\r\n      pageCount,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst _listCountries = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {countries, cities, jobRoles, specialties, industries, careerLevels, employmentTypes, genders, companyTypes, companyNames, dateModified} = req.body;\r\n\r\n  try {\r\n    const whereClause = _makeWhereClause({jobRoles, specialties, industries, careerLevels, employmentTypes, genders, companyTypes, companyNames, dateModified});\r\n    let sql = sprintf(\"SELECT M.*, J.count FROM %s M JOIN (SELECT J.countryId, COUNT(*) `count` FROM %s J JOIN %s R ON R.id = J.id JOIN %s A ON A.id = J.hireId %s GROUP BY J.countryId) J ON J.countryId = M.id AND J.count > 0 ORDER BY J.count DESC;\", dbTblName.core.countries, dbTblName.hire.jobs.main, dbTblName.hire.jobs.candidateRequirements, dbTblName.hire.accounts, whereClause);\r\n    const rows = await db.query(sql);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst _listCities = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {countries, cities, jobRoles, specialties, industries, careerLevels, employmentTypes, genders, companyTypes, companyNames, dateModified} = req.body;\r\n\r\n  try {\r\n    const whereClause = _makeWhereClause({countries, jobRoles, specialties, industries, careerLevels, employmentTypes, genders, companyTypes, companyNames, dateModified});\r\n    let sql = sprintf(\"SELECT M.*, J.count FROM %s M JOIN (SELECT J.cityId, COUNT(*) `count` FROM %s J JOIN %s R ON R.id = J.id JOIN %s A ON A.id = J.hireId %s GROUP BY J.cityId) J ON J.cityId = M.id AND J.count > 0 ORDER BY J.count DESC;\", dbTblName.core.cities, dbTblName.hire.jobs.main, dbTblName.hire.jobs.candidateRequirements, dbTblName.hire.accounts, whereClause);\r\n    const rows = await db.query(sql);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst _listJobRoles = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {countries, cities, jobRoles, specialties, industries, careerLevels, employmentTypes, genders, companyTypes, companyNames, dateModified} = req.body;\r\n\r\n  try {\r\n    const whereClause = _makeWhereClause({countries, cities, specialties, industries, careerLevels, employmentTypes, genders, companyTypes, companyNames, dateModified});\r\n    let sql = sprintf(\"SELECT M.*, J.count FROM %s M JOIN (SELECT J.jobRoleId, COUNT(*) `count` FROM %s J JOIN %s R ON R.id = J.id JOIN %s A ON A.id = J.hireId %s GROUP BY J.jobRoleId) J ON J.jobRoleId = M.id AND J.count > 0 ORDER BY J.count DESC;\", dbTblName.core.jobRoles, dbTblName.hire.jobs.main, dbTblName.hire.jobs.candidateRequirements, dbTblName.hire.accounts, whereClause);\r\n    const rows = await db.query(sql);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst _listSpecialties = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {countries, cities, jobRoles, specialties, industries, careerLevels, employmentTypes, genders, companyTypes, companyNames, dateModified} = req.body;\r\n\r\n  try {\r\n    const whereClause = _makeWhereClause({countries, cities, jobRoles, industries, careerLevels, employmentTypes, genders, companyTypes, companyNames, dateModified});\r\n    let sql = sprintf(\"SELECT M.*, J.count FROM %s M JOIN (SELECT J.specialties, COUNT(*) `count` FROM %s J JOIN %s R ON R.id = J.id JOIN %s A ON A.id = J.hireId %s GROUP BY J.specialties) J ON J.specialties = M.id AND J.count > 0 ORDER BY J.count DESC;\", dbTblName.core.specialties, dbTblName.hire.jobs.main, dbTblName.hire.jobs.candidateRequirements, dbTblName.hire.accounts, whereClause);\r\n    const rows = await db.query(sql);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst _listIndustries = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {countries, cities, jobRoles, specialties, industries, careerLevels, employmentTypes, genders, companyTypes, companyNames, dateModified} = req.body;\r\n\r\n  try {\r\n    const whereClause = _makeWhereClause({countries, cities, jobRoles, specialties, careerLevels, employmentTypes, genders, companyTypes, companyNames, dateModified});\r\n    let sql = sprintf(\"SELECT M.*, J.count FROM %s M JOIN (SELECT J.sectorId, COUNT(*) `count` FROM %s J JOIN %s R ON R.id = J.id JOIN %s A ON A.id = J.hireId %s GROUP BY J.sectorId) J ON J.sectorId = M.id AND J.count > 0 ORDER BY J.count DESC;\", dbTblName.core.sectors, dbTblName.hire.jobs.main, dbTblName.hire.jobs.candidateRequirements, dbTblName.hire.accounts, whereClause);\r\n    const rows = await db.query(sql);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst _listCareerLevels = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {countries, cities, jobRoles, specialties, industries, careerLevels, employmentTypes, genders, companyTypes, companyNames, dateModified} = req.body;\r\n\r\n  try {\r\n    const whereClause = _makeWhereClause({countries, cities, jobRoles, specialties, industries, employmentTypes, genders, companyTypes, companyNames, dateModified});\r\n    let sql = sprintf(\"SELECT M.*, J.count FROM %s M JOIN (SELECT R.careerLevel, COUNT(*) `count` FROM %s J JOIN %s R ON R.id = J.id JOIN %s A ON A.id = J.hireId %s GROUP BY R.careerLevel) J ON J.careerLevel = M.level AND J.count > 0 ORDER BY J.count DESC;\", dbTblName.core.careerLevels, dbTblName.hire.jobs.main, dbTblName.hire.jobs.candidateRequirements, dbTblName.hire.accounts, whereClause);\r\n    const rows = await db.query(sql);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst _listEmploymentTypes = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {countries, cities, jobRoles, specialties, industries, careerLevels, employmentTypes, genders, companyTypes, companyNames, dateModified} = req.body;\r\n\r\n  try {\r\n    const whereClause = _makeWhereClause({countries, cities, jobRoles, specialties, industries, careerLevels, genders, companyTypes, companyNames, dateModified});\r\n    let sql = sprintf(\"SELECT M.*, J.count FROM %s M JOIN (SELECT J.employmentTypeId, COUNT(*) `count` FROM %s J JOIN %s R ON R.id = J.id JOIN %s A ON A.id = J.hireId %s GROUP BY J.employmentTypeId) J ON J.employmentTypeId = M.id AND J.count > 0 ORDER BY J.count DESC;\", dbTblName.core.employmentTypes, dbTblName.hire.jobs.main, dbTblName.hire.jobs.candidateRequirements, dbTblName.hire.accounts, whereClause);\r\n    const rows = await db.query(sql);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst _listGenders = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {countries, cities, jobRoles, specialties, industries, careerLevels, employmentTypes, genders, companyTypes, companyNames, dateModified} = req.body;\r\n\r\n  try {\r\n    const whereClause = _makeWhereClause({countries, cities, jobRoles, specialties, industries, careerLevels, employmentTypes, companyTypes, companyNames, dateModified});\r\n    let sql = sprintf(\"SELECT * FROM (SELECT R.gender, COUNT(*) `count` FROM %s J JOIN %s R ON R.id = J.id JOIN %s A ON A.id = J.hireId %s GROUP BY R.gender) J WHERE J.gender != 'U' AND J.count > 0 ORDER BY J.count DESC;\", dbTblName.hire.jobs.main, dbTblName.hire.jobs.candidateRequirements, dbTblName.hire.accounts, whereClause);\r\n    const rows = await db.query(sql);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst _listCompanyTypes = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {countries, cities, jobRoles, specialties, industries, careerLevels, employmentTypes, genders, companyTypes, companyNames, dateModified} = req.body;\r\n\r\n  try {\r\n    const whereClause = _makeWhereClause({countries, cities, jobRoles, specialties, industries, careerLevels, employmentTypes, genders, companyNames, dateModified});\r\n    let sql = sprintf(\"SELECT * FROM (SELECT A.type `companyType`, COUNT(*) `count` FROM %s J JOIN %s R ON R.id = J.id JOIN %s A ON A.id = J.hireId %s GROUP BY A.type) J WHERE J.count > 0 ORDER BY J.count DESC;\", dbTblName.hire.jobs.main, dbTblName.hire.jobs.candidateRequirements, dbTblName.hire.accounts, whereClause);\r\n    const rows = await db.query(sql);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst _listCompanyNames = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {countries, cities, jobRoles, specialties, industries, careerLevels, employmentTypes, genders, companyTypes, companyNames, dateModified} = req.body;\r\n\r\n  try {\r\n    const whereClause = _makeWhereClause({countries, cities, jobRoles, specialties, industries, careerLevels, employmentTypes, genders, companyTypes, dateModified});\r\n    let sql = sprintf(\"SELECT * FROM (SELECT A.name `companyName`, COUNT(*) `count` FROM %s J JOIN %s R ON R.id = J.id JOIN %s A ON A.id = J.hireId %s GROUP BY A.name) J WHERE J.count > 0 ORDER BY J.count DESC;\", dbTblName.hire.jobs.main, dbTblName.hire.jobs.candidateRequirements, dbTblName.hire.accounts, whereClause);\r\n    const rows = await db.query(sql);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst listProc = async (req, res, next) => {\r\n  await _listItems(req, res, next);\r\n};\r\n\r\nconst listCountriesProc = async (req, res, next) => {\r\n  await _listCountries(req, res, next);\r\n};\r\n\r\nconst listCitiesProc = async (req, res, next) => {\r\n  await _listCities(req, res, next);\r\n};\r\n\r\nconst listJobRolesProc = async (req, res, next) => {\r\n  await _listJobRoles(req, res, next);\r\n};\r\n\r\nconst listSpecialtiesProc = async (req, res, next) => {\r\n  await _listSpecialties(req, res, next);\r\n};\r\n\r\nconst listIndustriesProc = async (req, res, next) => {\r\n  await _listIndustries(req, res, next);\r\n};\r\n\r\nconst listCareerLevelsProc = async (req, res, next) => {\r\n  await _listCareerLevels(req, res, next);\r\n};\r\n\r\nconst listEmploymentTypesProc = async (req, res, next) => {\r\n  await _listEmploymentTypes(req, res, next);\r\n};\r\n\r\nconst listGendersProc = async (req, res, next) => {\r\n  await _listGenders(req, res, next);\r\n};\r\n\r\nconst listCompanyTypesProc = async (req, res, next) => {\r\n  await _listCompanyTypes(req, res, next);\r\n};\r\n\r\nconst listCompanyNamesProc = async (req, res, next) => {\r\n  await _listCompanyNames(req, res, next);\r\n};\r\n\r\nconst applyProc = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {workId, jobId} = req.body;\r\n\r\n  try {\r\n\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/list\", listProc);\r\nrouter.post(\"/list-countries\", listCountriesProc);\r\nrouter.post(\"/list-cities\", listCitiesProc);\r\nrouter.post(\"/list-job-roles\", listJobRolesProc);\r\nrouter.post(\"/list-specialties\", listSpecialtiesProc);\r\nrouter.post(\"/list-industries\", listIndustriesProc);\r\nrouter.post(\"/list-career-levels\", listCareerLevelsProc);\r\nrouter.post(\"/list-employment-types\", listEmploymentTypesProc);\r\nrouter.post(\"/list-genders\", listGendersProc);\r\nrouter.post(\"/list-company-types\", listCompanyTypesProc);\r\nrouter.post(\"/list-company-names\", listCompanyNamesProc);\r\nrouter.post(\"/apply\", applyProc);\r\n// router.post(\"/upload-attachment\", deleteProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport {dbTblName} from \"core/config\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport helpers from \"core/helpers\";\r\nimport db from \"core/db\";\r\nimport {sprintf} from \"sprintf-js\";\r\n\r\nconst _listItems = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {userId, type, keyword, page, pageSize} = req.body;\r\n\r\n  try {\r\n    let conditions = {\r\n      userId: {\r\n        type: \"=\",\r\n        value: userId,\r\n      },\r\n      name: {\r\n        type: \"LIKE\",\r\n        value: `%${keyword}%`,\r\n      },\r\n      deletedDate: {\r\n        type: \"=\",\r\n        value: \"\",\r\n      },\r\n    };\r\n    if (!!type) {\r\n      conditions[\"type\"] = {\r\n        type: \"=\",\r\n        value: type,\r\n      }\r\n    }\r\n    const data = await helpers.listQuery({table: dbTblName.hire.letters, conditions, page: page || 1, pageSize});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst _listCompanies = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n\r\n  try {\r\n    let sql = sprintf(\"SELECT * FROM %s A JOIN (SELECT J.hireId, COUNT(*) `count` FROM %s J WHERE J.deletedDate = ? AND J.isActive = ? GROUP BY J.hireId) J ON J.hireId = A.id WHERE A.deletedDate = '' ORDER BY J.count DESC, A.id ASC;\", dbTblName.hire.accounts, dbTblName.hire.jobs.main);\r\n    const rows = await db.query(sql, [\"\", 1]);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst listProc = async (req, res, next) => {\r\n  await _listItems(req, res, next);\r\n};\r\n\r\nconst listCompaniesProc = async (req, res, next) => {\r\n  await _listCompanies(req, res, next);\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/list\", listProc);\r\nrouter.post(\"/list-companies\", listCompaniesProc);\r\n// router.post(\"/upload-attachment\", deleteProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport {dbTblName} from \"core/config\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport helpers from \"core/helpers\";\r\nimport db from \"core/db\";\r\nimport {sprintf} from \"sprintf-js\";\r\n\r\nconst _listItems = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {userId, type, keyword, page, pageSize} = req.body;\r\n\r\n  try {\r\n    let conditions = {\r\n      userId: {\r\n        type: \"=\",\r\n        value: userId,\r\n      },\r\n      name: {\r\n        type: \"LIKE\",\r\n        value: `%${keyword}%`,\r\n      },\r\n      deletedDate: {\r\n        type: \"=\",\r\n        value: \"\",\r\n      },\r\n    };\r\n    if (!!type) {\r\n      conditions[\"type\"] = {\r\n        type: \"=\",\r\n        value: type,\r\n      }\r\n    }\r\n    const data = await helpers.listQuery({table: dbTblName.hire.letters, conditions, page: page || 1, pageSize});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst _listLocations = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n\r\n  try {\r\n    let sql = sprintf(\"SELECT C.*, J.count FROM %s C JOIN (SELECT J.countryId, COUNT(*) `count` FROM %s J WHERE  J.deletedDate = ? AND J.isActive = ? GROUP BY J.countryId) J ON J.countryId = C.id ORDER BY J.count DESC, C.id ASC;\", dbTblName.core.countries, dbTblName.hire.jobs.main);\r\n    const rows = await db.query(sql, [\"\", 1]);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst listProc = async (req, res, next) => {\r\n  await _listItems(req, res, next);\r\n};\r\n\r\nconst listLocationsProc = async (req, res, next) => {\r\n  await _listLocations(req, res, next);\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/list\", listProc);\r\nrouter.post(\"/list-locations\", listLocationsProc);\r\n// router.post(\"/upload-attachment\", deleteProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport {dbTblName} from \"core/config\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport helpers from \"core/helpers\";\r\nimport db from \"core/db\";\r\nimport {sprintf} from \"sprintf-js\";\r\n\r\nconst _listItems = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {userId, type, keyword, page, pageSize} = req.body;\r\n\r\n  try {\r\n    let conditions = {\r\n      userId: {\r\n        type: \"=\",\r\n        value: userId,\r\n      },\r\n      name: {\r\n        type: \"LIKE\",\r\n        value: `%${keyword}%`,\r\n      },\r\n      deletedDate: {\r\n        type: \"=\",\r\n        value: \"\",\r\n      },\r\n    };\r\n    if (!!type) {\r\n      conditions[\"type\"] = {\r\n        type: \"=\",\r\n        value: type,\r\n      }\r\n    }\r\n    const data = await helpers.listQuery({table: dbTblName.hire.letters, conditions, page: page || 1, pageSize});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst _listRoles = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {countryId, cityId} = req.body;\r\n\r\n  try {\r\n    let locationWhereArr = [];\r\n    let locationValueArr = [];\r\n    if (!!countryId) {\r\n      locationWhereArr.push(sprintf(\"J.countryId = ?\"));\r\n      locationValueArr.push(countryId);\r\n    }\r\n    if (!!cityId) {\r\n      locationWhereArr.push(sprintf(\"J.cityId = ?\"));\r\n      locationValueArr.push(cityId);\r\n    }\r\n    let locationWhere = !!locationWhereArr.length ? `${locationWhereArr.join(\" AND \")} AND` : \"\";\r\n    let sql = sprintf(\"SELECT R.*, J.count FROM %s R JOIN (SELECT J.jobRoleId, COUNT(*) `count` FROM %s J WHERE %s J.deletedDate = ? AND J.isActive = ? GROUP BY J.jobRoleId) J ON J.jobRoleId = R.id ORDER BY J.count DESC, R.id ASC;\", dbTblName.core.jobRoles, dbTblName.hire.jobs.main, locationWhere);\r\n    const rows = await db.query(sql, [...locationValueArr, \"\", 1]);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst listProc = async (req, res, next) => {\r\n  await _listItems(req, res, next);\r\n};\r\n\r\nconst listRolesProc = async (req, res, next) => {\r\n  await _listRoles(req, res, next);\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/list\", listProc);\r\nrouter.post(\"/list-roles\", listRolesProc);\r\n// router.post(\"/upload-attachment\", deleteProc);\r\n\r\nexport default router;\r\n","import express from \"express\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport {dbTblName} from \"core/config\";\r\nimport strings from \"core/strings\";\r\nimport tracer from \"core/tracer\";\r\nimport consts from \"core/consts\";\r\nimport helpers from \"core/helpers\";\r\nimport db from \"core/db\";\r\nimport {sprintf} from \"sprintf-js\";\r\n\r\nconst _listItems = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n  const {userId, type, keyword, page, pageSize} = req.body;\r\n\r\n  try {\r\n    let conditions = {\r\n      userId: {\r\n        type: \"=\",\r\n        value: userId,\r\n      },\r\n      name: {\r\n        type: \"LIKE\",\r\n        value: `%${keyword}%`,\r\n      },\r\n      deletedDate: {\r\n        type: \"=\",\r\n        value: \"\",\r\n      },\r\n    };\r\n    if (!!type) {\r\n      conditions[\"type\"] = {\r\n        type: \"=\",\r\n        value: type,\r\n      }\r\n    }\r\n    const data = await helpers.listQuery({table: dbTblName.hire.letters, conditions, page: page || 1, pageSize});\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      ...data,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst _listSectors = async (req, res, next) => {\r\n  const lang = req.get(consts.lang) || consts.defaultLanguage;\r\n  const langs = strings[lang];\r\n\r\n  try {\r\n    let sql = sprintf(\"SELECT M.*, J.count FROM %s M JOIN (SELECT J.sectorId, COUNT(*) `count` FROM %s J WHERE  J.deletedDate = ? AND J.isActive = ? GROUP BY J.sectorId) J ON J.sectorId = M.id ORDER BY J.count DESC, M.id ASC;\", dbTblName.core.sectors, dbTblName.hire.jobs.main);\r\n    const rows = await db.query(sql, [\"\", 1]);\r\n\r\n    res.status(200).send({\r\n      result: langs.success,\r\n      data: rows,\r\n    });\r\n  } catch (err) {\r\n    helpers.handleErr(res, langs, err);\r\n  }\r\n};\r\n\r\nconst listProc = async (req, res, next) => {\r\n  await _listItems(req, res, next);\r\n};\r\n\r\nconst listSectorsProc = async (req, res, next) => {\r\n  await _listSectors(req, res, next);\r\n};\r\n\r\nconst router = express.Router();\r\n\r\nrouter.post(\"/list\", listProc);\r\nrouter.post(\"/list-sectors\", listSectorsProc);\r\n// router.post(\"/upload-attachment\", deleteProc);\r\n\r\nexport default router;\r\n","module.exports = require(\"axios\");","module.exports = require(\"cluster\");","module.exports = require(\"cookie-parser\");","module.exports = require(\"cors\");","module.exports = require(\"crypto\");","module.exports = require(\"dateformat\");","module.exports = require(\"ddos\");","module.exports = require(\"debug\");","module.exports = require(\"dotenv\");","module.exports = require(\"email-templates\");","module.exports = require(\"express\");","module.exports = require(\"express-form-data\");","module.exports = require(\"express-jwt\");","module.exports = require(\"fs\");","module.exports = require(\"helmet\");","module.exports = require(\"http\");","module.exports = require(\"https\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"mkdirp\");","module.exports = require(\"moment\");","module.exports = require(\"morgan\");","module.exports = require(\"mysql2\");","module.exports = require(\"nodemailer\");","module.exports = require(\"os\");","module.exports = require(\"path\");","module.exports = require(\"sprintf-js\");","module.exports = require(\"tracer\");","module.exports = require(\"uuid\");"],"sourceRoot":""}